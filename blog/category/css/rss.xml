<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/css/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>The WYSIWYG is a Lie</title>
  <description>
    <![CDATA[<p>If you’ve ever implemented a WYSIWYG editor in Drupal, one thing that becomes apparent quickly is that the term (What You See Is What You Get) is a complete lie. None of the default theme styles appear in the editor, because the editor shows up in the admin theme. This obviously diminishes its value, and makes custom element styles useless. The good news is that it’s fairly simple to fix - once you know how.</p>

<p>Drupal 8’s default WYSIWYG is CKEditor, and it’s included as a core module with <a href="https://www.drupal.org/docs/8/api/ckeditor-api/overview">its own API</a>. This is great, because they also added a way to get that default theme front-end code into the admin theme CKEditor. The description of how to manage this leaves a bit to be desired, as all they mention is ‘specifying a <code class="highlighter-rouge">ckeditor_stylesheets</code> key in the <code class="highlighter-rouge">*.info.yml</code> file’.</p>

<p>Let’s start from the beginning. Say you’ve been working on a D8 site and the intro has an H2, some text, and a call to action button:</p>

<p><img src="/assets/images/blog/intro1.png" alt="intro1.png" class="center" /></p>

<p>That’s great! What does CKEditor show us?</p>

<p><img src="/assets/images/blog/intro2.png" alt="intro2.png" class="center" /></p>

<p>Oh. What I see is certainly <em>not</em> what I get. Let’s start by showing the basic styles in CKEditor. Go to your current default theme (ours is in <code class="highlighter-rouge">/web/themes/custom/</code>) and find your <code class="highlighter-rouge">THEMENAME.info.yml</code>. Open it in your favorite editor and you’ll see something like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">My Theme Name</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">theme</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">A base theme for My Site</span>
<span class="na">package</span><span class="pi">:</span> <span class="s">Other</span>
<span class="na">core</span><span class="pi">:</span> <span class="s">8.x</span>

<span class="na">base theme</span><span class="pi">:</span> <span class="s">classy</span>

<span class="s">regions, etc...</span>
</code></pre></div></div>

<p>Now add the <code class="highlighter-rouge">ckeditor_stylesheets:</code> key and the target file right below the <code class="highlighter-rouge">core: 8.x</code> line, like so:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
<span class="na">package</span><span class="pi">:</span> <span class="s">Other</span>
<span class="na">core</span><span class="pi">:</span> <span class="s">8.x</span>
<span class="na">ckeditor_stylesheets</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">css/ckeditor.css</span>
</code></pre></div></div>

<p>If there’s something already under <code class="highlighter-rouge">core: 8.x</code> just put the CKEditor lines below it.</p>

<p>Next you have to actually add a file there! Go to your theme’s <code class="highlighter-rouge">/css/</code> directory and add an empty <code class="highlighter-rouge">ckeditor.css</code> file next to the site’s <code class="highlighter-rouge">style.css</code>.</p>

<p>Now, you <em>could</em> just tell CKEditor to load all of the site CSS - but that would be overkill for the poor little iframe. It’s better to just find the vanilla CSS styles you need in your <code class="highlighter-rouge">style.css</code> file and copy them over. In our case it’s only about 160 lines of CSS - the default styles for the site, plus some rendered Sass mixins for the button. How does our WYSIWYG look now?</p>

<p><img src="/assets/images/blog/intro3.png" alt="intro3.png" class="center" /></p>

<p>Bazinga! What a difference.</p>

<p>Hmm, but our button is missing its styles because we haven’t configured the CKEditor for that yet.</p>

<p>Go into the Drupal configs to set that up at <code class="highlighter-rouge">/admin/config/content/formats</code> and click ‘configure’ for the CKEditor text format you want (Full HTML, etc).</p>

<p>If you don’t have ‘Styles’ in the ‘Active Toolbar’, add it by dragging it in. It looks good next to ‘Format’, and has a similar behavior:</p>

<p><img src="/assets/images/blog/ckedit1.png" alt="ckedit1.png" class="center" /></p>

<p>Then scroll down to the ‘Styles dropdown’ tab and add the appropriate markup and class for the button.</p>

<p><img src="/assets/images/blog/ckedit2.png" alt="ckedit2.png" class="center" /></p>

<p>In our case we want to turn an anchor link (<code class="highlighter-rouge">a</code>) into a button by adding a <code class="highlighter-rouge">.button</code> class, so we use <code class="highlighter-rouge">a.button</code>. The text after the pipe (<code class="highlighter-rouge">|</code>) is what will appear in the ‘Styles’ dropdown.</p>

<p>Finally, make sure you’ve added that markup to the ‘allowed HTML tags’ section if you’re adding it to a restricted markup configuration:</p>

<p><img src="/assets/images/blog/ckedit6.png" alt="ckedit6.png" class="center" /></p>

<p><em>Important Note:</em> style options won’t show up in the Styles dropdown unless you have clicked/selected an eligible piece of markup - in our case the <code class="highlighter-rouge">a</code> tag - in the CKEditor window. So in our example, we’d have to click on ‘read more’ before we click on the Styles dropdown.</p>

<p><img src="/assets/images/blog/ckedit5.gif" alt="ckedit5.gif" class="center" /></p>

<p>As long as you have <code class="highlighter-rouge">a.button</code> styles in <code class="highlighter-rouge">ckeditor.css</code>, it should work right away. (Well, after a cache clear. It’s Drupal.)</p>

<p>And that’s it! From here you can continue to add styles to <code class="highlighter-rouge">ckeditor.css</code>, and to the Styles dropdown in the Drupal ‘Text formats and editors’ admin.</p>

<p>The WYSIWYG is no longer a lie!</p>

]]>
  </description>
  <pubDate>Tue, 29 Aug 2017 04:20:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2017/08/the-wysiwyg-is-a-lie/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2017/08/the-wysiwyg-is-a-lie/</guid>
</item>

    
      <item>
  <title>Fade To Black - Responsive CSS Gradients</title>
  <description>
    <![CDATA[<p><img src="/assets/images/blog/fade-to-black-1.jpg" alt="fade-to-black-1.jpg" class="left forty" /> <a href="//alistapart.com/article/responsive-web-design">Responsive design</a> brings a fascinating array of challenges to both designers and developers. Using background images in a call to action or blockquote element is a great way to add visual appeal to a design, as you can see in the image to the left.</p>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-2.jpg" alt="fade-to-black-2.jpg" class="right thirty" /> However, at mobile sizes, you’re faced with some tough decisions. Do you try and stretch the image to fit the height of the container? If so, at very tall/narrow widths, you’re forced to load a giant image, and it likely won’t be recognizable.</p>

<p>In addition, forcing mobile users to load a large image is bad for performance. Creating custom responsive image sets would work, but that sets up a maintenance problem, something most clients will <em>not</em> appreciate.</p>

<p>Luckily, there’s a solution that allows us to keep the image aspect ratio, set up standard <a href="//css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/">responsive images</a>, and it looks great on mobile as well. The fade-out!</p>

<p>I’ll be using screenshots and code here, but I’ve also made <a href="//codepen.io/collection/XeBvKo/">all 6 steps available on CodePen</a> if you want to play with the code and try out different colors, images, etc…</p>

<p><br clear="all" /><br /></p>

<p>Let’s start with that first blockquote:</p>

<p><img src="/assets/images/blog/fade-to-black-1.jpg" alt="fade-to-black-1.jpg" class="left forty" /> <a href="//codepen.io/komejo/pen/GERJwy">(pen)</a> This is set up for desktop - the image aspect ratio is determining the height of the container using the <a href="//stackoverflow.com/questions/1495407/maintain-the-aspect-ratio-of-a-div-with-css">padding ratio trick</a>. Everything in the container is using absolute positioning and <a href="http://www.sketchingwithcss.com/samplechapter/cheatsheet.html">flexbox</a> for centering. We have a simple <code class="highlighter-rouge">rgba()</code> background set using the <code class="highlighter-rouge">:before</code> pseudo-property in the .parent-container:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">:before</span> <span class="p">{</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">""</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0.4</span><span class="p">);</span>
    <span class="nl">z-index</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>
    <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-3.jpg" alt="fade-to-black-3.jpg" class="right forty" /> <a href="//codepen.io/komejo/pen/QgWyLN">(pen)</a> The issues arise once we get a quote of reasonable length, and/or the page width gets too small. As you can see, it overflows and breaks quite badly.</p>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-4.jpg" alt="fade-to-black-4.jpg" class="left forty" /> <a href="//codepen.io/komejo/pen/XgWXWz">(pen)</a> We can fix this by setting some changes to take place at a certain breakpoint, depending on the max length of the field and the size of the image used.</p>

<p>Specifically, we remove the padding from the parent element, and make the .content-wrapper <code class="highlighter-rouge">position: static</code>. (I like to set a min-height as well just in case the content is very small)</p>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-5.jpg" alt="fade-to-black-5.jpg" class="right forty" /> <a href="//codepen.io/komejo/pen/JJjGXB">(pen)</a> Now we can add the fader code - <code class="highlighter-rouge">background-image: linear-gradient</code>, which can be used <a href="http://caniuse.com/#search=linear-gradient">unprefixed</a>. This is inserted into the .image-wrapper using another <code class="highlighter-rouge">:before</code> pseudo-element:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">:before</span> <span class="p">{</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">""</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span>
      <span class="p">//</span> <span class="n">Fade</span> <span class="n">over</span> <span class="n">the</span> <span class="n">entire</span> <span class="n">image</span> <span class="n">-</span> <span class="n">not</span> <span class="n">great</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="m">0%</span><span class="p">,</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1.0</span><span class="p">)</span> <span class="m">100%</span>
    <span class="p">);</span>
  <span class="p">}</span><span class="o">;</span>
</code></pre></div></div>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-6.jpg" alt="fade-to-black-6.jpg" class="left forty" /> <a href="//codepen.io/komejo/pen/XgWXNZ">(pen)</a> The issue now is that the gradient covers the entire image, but we can fix that easily by adding additional <code class="highlighter-rouge">rgba()</code> values, in effect ‘stretching’ the part of the gradient that’s transparent:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">:before</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span>
      <span class="p">//</span> <span class="n">Transparent</span> <span class="n">at</span> <span class="n">the</span> <span class="nb">top</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="m">0%</span><span class="p">,</span>
      <span class="p">//</span> <span class="n">Still</span> <span class="nb">transparent</span> <span class="n">through</span> <span class="m">70%</span> <span class="n">of</span> <span class="n">the</span> <span class="n">image</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="m">70%</span><span class="p">,</span>
      <span class="p">//</span> <span class="n">Now</span> <span class="n">fade</span> <span class="n">to</span> <span class="nb">solid</span> <span class="n">to</span> <span class="n">match</span> <span class="n">the</span> <span class="n">background</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1.0</span><span class="p">)</span> <span class="m">100%</span>
    <span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>

<p><br clear="all" /><br /></p>

<p><img src="/assets/images/blog/fade-to-black-7.jpg" alt="fade-to-black-7.jpg" class="right forty" /> <a href="//codepen.io/komejo/pen/RgwrZb">(pen)</a> Finally, we can fine-tune the gradient by adding even more <code class="highlighter-rouge">rgba()</code> values and setting the percentages and opacity as appropriate.</p>

<p>Once we’re satisfied that the gradient matches the design, all that’s left is to make the gradient RGBA match the .parent-container background color (not the overlay - this tripped me up for a while!), which in our case is supposed to be <code class="highlighter-rouge">#000</code>:</p>

<p><br clear="all" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">:before</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="m">0%</span><span class="p">,</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">)</span> <span class="m">70%</span><span class="p">,</span>
      <span class="p">//</span> <span class="n">These</span> <span class="n">three</span> <span class="s2">'smooth'</span> <span class="n">out</span> <span class="n">the</span> <span class="n">fade</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.2</span><span class="p">)</span> <span class="m">80%</span><span class="p">,</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.7</span><span class="p">)</span> <span class="m">90%</span><span class="p">,</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.9</span><span class="p">)</span> <span class="m">95%</span><span class="p">,</span>
      <span class="p">//</span> <span class="n">Solid</span> <span class="n">to</span> <span class="n">match</span> <span class="n">the</span> <span class="n">background</span><span class="p">.</span>
      <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1.0</span><span class="p">)</span> <span class="m">100%</span>
    <span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>We’ll be rolling out sites in a few weeks with these techniques in live code, and with several slight variations to the implementation (mostly adding responsive images and making allowances for Drupal’s markup), but this is the core idea used.</p>

<p>Feel free to <a href="//codepen.io/collection/XeBvKo/">play with the code</a> yourself, and change the <code class="highlighter-rouge">rgba()</code> values so that you can see what each is doing.</p>

]]>
  </description>
  <pubDate>Tue, 06 Jun 2017 08:30:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2017/06/fade-to-black-responsive-css-gradients/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2017/06/fade-to-black-responsive-css-gradients/</guid>
</item>

    
      <item>
  <title>Building Forms with FormAssembly</title>
  <description>
    <![CDATA[<p>In a recent project here at ThinkShout, I needed to create a form for an existing site. Creating a form isn’t hard, but I had two problems I needed to solve that made things a little more complicated: 1) The form needed to adopt the style of the existing site and, 2) I had no backend to process the form.</p>

<p>I could have used Google Forms. Although it’s a solution, Google Forms does not allow a custom confirmation page. This could lead your user to be lost and wonder why they’ve landed on such a nondescript page after submitting your form. With <a href="https://www.formassembly.com/">FormAssembly</a>, I could generate the form markup, add validation, and add a custom link for my users to be redirected to after submitting my form.</p>

<p>Usually, a site needs to collect some kind of data. It could be as simple as a contact form or collecting emails for a newsletter.  Forms are the way to collect user input on the internet, so we need them. You might have a static site or be a user of a CMS without the ability to create forms. A solution like FormAssembly can help solve this problem.</p>

<h2 id="building-your-form">Building Your Form</h2>
<p>Inside FormAssembly, you have access to a drag and drop interface. This way, you don’t have to create your markup by hand, which is good because FormAssembly provides a lot of custom scripts to help you with validation and grouping fields.</p>

<p><img src="/assets/images/blog/formassembly-validation.png" alt="Form assembly validation" /></p>

<p>When you click the options for each field, you can select the type of data you want in the field as well as indicate whether or not its presence is required. You can also click into each label to change the text or drag fields around to reorder them.</p>

<p><img src="/assets/images/blog/formassembly-add-fields.png" alt="Form assembly add fields" /></p>

<p>Although I don’t like the generated markup that much, it’s definitely better than writing all the markup by hand. Also, the markup is manageable. Once you’ve created your markup, you can click back to your list of forms and click “publish.” Under publishing options, there is a text box for you to snag all of the form markup. Instead of leaving this in FormAssembly, I copied the markup into an html file and committed it to a GitHub repository. Once you’ve finalized your form fields, this makes it easier to manage revisions to your form. If you have changes to a field, simply update it in FormAssembly and copy the field html into your form again.</p>

<p><img src="/assets/images/blog/formassembly-publishing.png" alt="Form assembly publishing" /></p>

<h2 id="styling-your-form">Styling Your Form</h2>
<p>Now the magic can begin. I recommend wrapping the FormAssembly markup in an <code class="highlighter-rouge">id</code> such as <code class="highlighter-rouge">&lt;div id=“formAssembly”&gt;&lt;/div&gt;</code> If you are embedding your form in an existing site, you’ll surely have issues with conflicting styles. Nest all of your styles under the <code class="highlighter-rouge">id</code> attached to your wrapper element to reduce styling difficulty.</p>

<p>You can include your styles inside your form, but I opted for an external stylesheet.  I added a style tag inside the wrapper element to link to my stylesheet hosted on GitHub:</p>

<p><code class="highlighter-rouge">&lt;style&gt;@import url(‘path to stylesheet’);&lt;/style&gt;</code></p>

<p>The benefit of doing it this way is having all your styles in one place. Then if you create multiple forms, you can link them all to one stylesheet.</p>

<h2 id="summary">Summary</h2>
<p>FormAssembly is really easy to use. As always, my only gripe with a tool like this is that you have less control over the final markup. However, this tool seemed to offer more control than other solutions. They also have a form API if you want to get more advanced.</p>

<p>If you’re using FormAssembly on a current project, please share your experience in the comments. I’d love to knopw what you think.</p>
]]>
  </description>
  <pubDate>Fri, 09 Sep 2016 07:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/09/form-assembly/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/09/form-assembly/</guid>
</item>

    
      <item>
  <title>Media Optimization for Selma, Bridge to the Ballot</title>
  <description>
    <![CDATA[<p>Imagine for a moment: you’ve just finished making the most gorgeous website you’ve ever made. It’s got the works — the newest, wiz-bang plugins. Heck, you don’t even have to support IE 6-8. You’ve achieved what I like to call “made in the shade.” These creations work well until you release them from their controlled environment. Out in the wild, websites, mobile applications, and other connected devices have to contend with lots of requests, network latency, bandwidth and other things. They get slow in the wild. This fabulous creation has no control over network congestion and user device capabilities. You do have control over how many requests your page makes to the serve and the size of those requests. Remember these two things:</p>

<ul>
  <li>
    <p>Speed is a feature</p>
  </li>
  <li>
    <p>Make the first request count</p>
  </li>
</ul>

<p>ThinkShout worked with the Southern Poverty Law Center to launch <a href="http://selma.splcenter.org/">Selma — Bridge to the Ballot</a>. It’s a single-page site that includes a background video, a video trailer, photo gallery and a nice, clickable timeline. I had the opportunity to make front end optimizations on this site.</p>

<p>To make your site load fast, you should spend time reducing the size of your assets where possible. Also we should do what we can to get the HTML and CSS down to the user as soon as possible. This is called optimizing for the<a href="https://docs.google.com/presentation/d/1IRHyU7_crIiCjl0Gvue0WY3eY_eYvFQvSfwQouW9368/present?slide=id.gc57996a9_046"> critical rendering path</a>. This is the approach we took on the Selma website.</p>

<p>Most of the work happened on 4 types of assets — video, images, CSS/JS and Fonts.</p>

<h2 id="benchmarking">Benchmarking</h2>

<p>Chrome developer tools for measuring the load times, file sizes and network requests. There is also a featured called<a href="https://developer.chrome.com/devtools/docs/device-mode"> device mode</a>. You can emulate a variety of mobile devices and simulate network speeds with device mode.</p>

<p><img src="/assets/images/blog/selma-media-image_1.png" alt="selma-media-image_1.png" /></p>

<p>After we initially built this site, with no optimization, it weighed in at about 20MB. On Selma, we simulated a normal 3G connection. We measured 76 web requests. On this connection, it took close to 10 seconds before there was any paint on the page. Yes, that’s a huge number, but keep in mind this is just a starting point.</p>

<h2 id="video">Video</h2>

<p>The intro to the site begins with an HTML video as the background. Videos are large, even small ones. We used <a href="http://www.webmproject.org/">WebM</a> format, supported across most modern browsers and an MP4 as a fallback. WebM files are much smaller. Along with the size consideration, we did not want the background video to load on mobile phones. Additionally, on larger screens, the background video needed to pause when a user clicked the “play trailer” button, then play again when the user finished viewing the trailer.</p>

<p>If you put the video tag in the document body, it will load even if you set it to display: you don’t need to put it in your css. A trick we used was to avoid this when writing out the video to only write out the video to the page only when loading on a large screen. We use a loadVideo() function to write out our video. And we only load it when the screen is larger than a phone or resized to larger than mobile.</p>

<p>Here is what we do to load the video when we want. Our examples will assume the use of jQuery because that’s what we used.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Function to write the video to the video container</span>
<span class="kd">function</span> <span class="nx">loadVideo</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="s1">'.video-container'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
		<span class="s1">'&lt;video&gt;'</span> <span class="o">+</span>
			<span class="s1">'&lt;source src="path/to/video.webm"&gt;'</span> <span class="o">+</span>
			<span class="s1">'&lt;source src="path/to/video.webm"&gt;'</span> <span class="o">+</span>
		<span class="s1">'&lt;/video&gt;'</span>
	<span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Initially check the screen size and load the video if we need it</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">width</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">480</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">loadVideo</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// If the window size change and the video isn’t already loaded,</span>
<span class="c1">// load the video</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">resize</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">width</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">481</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'.header-video video'</span><span class="p">).</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
 		<span class="nx">loadVideo</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Next, we wanted to pause the video when the pause/play background video ‘play trailer’ button is clicked. The HTML video tag contains javascript methods to manipulate it. We take advantage of two aptly-named methods: play() and pause(). We used the Magnific Popup plugin for our image gallery and video trailer. With this plugin, we are able to supply our play and pause methods as callback methods in to fire in the plugin configuration options.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="s1">'.play-button'</span><span class="p">).</span><span class="nx">magnificPopup</span><span class="p">({</span> 
	<span class="na">callbacks</span><span class="p">:</span> <span class="p">{</span> 
		<span class="c1">// When the our popup opens pause         </span>
		<span class="na">open</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
			<span class="nx">$</span><span class="p">(</span><span class="s1">'video'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pause</span><span class="p">();</span>   
		<span class="p">},</span>  
		<span class="c1">// When our popup closes play                                                                                        </span>
		<span class="na">close</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">$</span><span class="p">(</span><span class="s1">'video'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">play</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>                                                                                                              
<span class="p">});</span>
</code></pre></div></div>

<p>Now when a user plays the trailer, we get what we want with hardly any additional code. The plugin and the HTML5 Javascript API do it for us.</p>

<h2 id="images">Images</h2>

<p>Unoptimized images are assets most responsible for slow load times on the internet. You should compress your images so they render faster. Also, sprite smaller images so they come in as a single request. Wherever possible, use background images. Inline images slow down page rendering. These optimizations are key to doing the most with the first request you make to the server. Remember, we want to get our html and CSS down to our user expeditiously.</p>

<p>A great tool for reducing the size of your images is<a href="https://tinypng.com/"> TinyPNG</a>. You can get<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization#lossless-vs-lossy-image-compression"> lossy</a> compression and still keep the alpha transparency of your images. There are other tools available as well such as Yahoo’s<a href="http://www.imgopt.com"> Smush.it</a>.</p>

<p>If you have large background images, create mobile versions of those images. When your site loads on mobile, those images will be applied without any additional web requests.</p>

<p>Finally, choose the right image format. If you don’t need transparency, use a jpg. If you need better detail in your images use a PNG. If you need animation, use a GIF. Using a PNG for a large background image will unnecessarily cause your user to download a huge file.</p>

<h2 id="css-and-js">CSS and JS</h2>

<p>The faster you get the HTML and CSS down, happier the site user will be. It’s been shown that a user likes to have content rendering within at least three seconds of requesting the page. A user would rather see progressive rendering of the page than a blank page and then have everything load all at once.</p>

<p>Where we declare our CSS/JS matters. Put stylesheets and scripts used for your above-the-fold content in the head of your document. The CSS/JS we needed for our video and splash image are included in the head of our document.</p>

<p>Do just the opposite for scripts you need last. On the Selma, site we use a plugin called <a href="http://timeline.knightlab.com">TimelineJS</a>. TimelineJS has several requests associated with the plugin, including images from Flickr. We declared that script right before the close of our body tag. Why? We don’t need it until way the user gets to the bottom of our page. If we included it in the head we would be blocking HTML CSS and JS needed to get above the fold content to the user. This is another form of progressive enhancement.</p>

<p>Lastly, aggregate your CSS and JS so you don’t make unnecessary server requests. In our case, we use<a href="https://github.com/ixti/jekyll-assets"> Jekyll Assets</a> for our asset pipeline. This plugin will let us compress our CSS with <a href="http://sass-lang.com/">Sass</a> and JS with<a href="https://github.com/lautis/uglifier"> Uglifier</a>. Fewer CSS and JS requests get painted on to the browser quickly.</p>

<h2 id="fonts">Fonts</h2>

<p>Fonts that are already on your user’s computer don’t cost you any extra. On Selma, we realized we had a font that looked almost identical to Georgia. Using @font-face will make a request for the font files you need. So we got rid of the custom font we were using. There are about four files for each font. So if you have one font, but that font has a regular, bold, and italic typeface, you’ve just made 12 server requests for that font.</p>

<p>In addition, if you are going to use @font-face, use an appropriate fallback font. I say appropriate because when your font finally loads, you don’t want it to be a jarring experience for the user.</p>

<h2 id="summary">Summary</h2>

<p>In the end, were able to get our site down to 1.4MB, and painting to the page in less than 1 second on a normal 3G network. We now have 43 requests and our entire DOM is loaded in 2.45 seconds on this connection. There is a lot more fine tuning we can do here. But this shows how snappy you can make your site just by doing basic optimizations around the aforementioned 4 types of assets.</p>

<p>Be mindful of bandwidth and network latency. Reduce image size. Aggregate CSS/JS. Delay blocking JS. These are easy things any front end developer can do to optimize websites and make users happy. I am a fan of <a href="https://www.igvita.com/">Ilya Grigorik</a>, web performance engineer at Google. He is a great resource on the subject. He also has a book you can read called <em>High-Performance Browser Networking</em>. It’s a great resource on web optimization.</p>

<p>The Selma site launched just in time for the 50th anniversary of the Selma-to-Montgomery marches. As users from around the world accessed the site to commemorate the events of Bloody Sunday, even those with low bandwidth connections could learn about this pivotal moment in the Civil Rights Movement for themselves on the web.</p>
]]>
  </description>
  <pubDate>Tue, 31 Mar 2015 00:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/03/media-optimization-with-splc/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/03/media-optimization-with-splc/</guid>
</item>

    

  </channel>
</rss>
