<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/splc/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>The Southern Poverty Law Center Gets Nominated for a Webby</title>
  <description>
    <![CDATA[<p>Have you heard the news? A ThinkShout-built site has been nominated for a <a href="http://webbyawards.com/">Webby</a>! And yes, it’s a Drupal site.</p>

<p>The nominated site is none other than <a href="https://www.splcenter.org/">Splcenter.org</a>, the online voice of the Southern Poverty Law Center, an organization committed to teaching tolerance, battling institutionalized prejudice, and giving a voice to the most vulnerable people in our communities. Our partnership with the SPLC has been a source of great pride for us, as it’s led to an amazing collaboration for our respective teams.</p>

<p>The Southern Poverty Law Center demonstrated its commitment to web excellence during the redesign process by investing in a platform that supports the vital work they do in the fight against injustice in our country, making it available and accessible to the people who need it most. This was an incredible undertaking, and I encourage you to check out our <a href="https://thinkshout.com/work/splc/">case study</a> on the journey to the relaunch of the SPLC to learn more about the process.</p>

<p>The Webbys are perhaps the most prestigious awards of their kind and simply being nominated is an honor. Splcenter.org is technically up for two awards in the “Websites - Law” category. The first is a Webby, chosen by the Webby Academy. The second is the People’s Voice Webby. While we can’t affect the outcome of the first award (beyond the work we put into making a great website), the community  decides the winner of the second. <a href="https://pv.webbyawards.com/2016/websites/general-website/law">Yes, you can help a great organization win by voting for the SPLC</a>!</p>

<p>The site is the product of countless hours of work and careful planning. We strove to build the SPLC a site that would further their mission and protect them from cyber attacks carried out by the forces of hate they combat every day. Together, we’ve accomplished these goals. We believe that work speaks for itself on the new site, but the improvement is measurable, too: since launch, we’ve tracked a 55% increase in overall traffic year-over-year, with a 120% increase in mobile traffic. From the <a href="https://www.splcenter.org/hate-map">Hate Map</a> – which provides a highly accessible, albeit terrifying view of the rise of hate groups in the U.S. – to the sheer volume of civil rights news and resources made readily available and searchable from any page, the SPLC continues to expand its award-winning voice online. We’re asking you to contribute your vote and show the world that the SPLC deserves the People’s Voice award.</p>

<p><a href="https://pv.webbyawards.com/2016/websites/general-website/law">Please take a moment to cast your vote for the Southern Poverty Law Center</a>. With the Webby’s, your voice makes a difference, so please vote and be heard!</p>
]]>
  </description>
  <pubDate>Tue, 12 Apr 2016 08:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/04/splc-nominated-for-a-webby/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/04/splc-nominated-for-a-webby/</guid>
</item>

    
      <item>
  <title>Relaunching the Southern Poverty Law Center's Website</title>
  <description>
    <![CDATA[<p>When projects get hectic around the office, we remind ourselves “We’re just pushing pixels.” We’re geeks. We sit in an air-conditioned office and play with cutting edge technologies on shiny MacBooks, drinking aeropress coffee.
At the same time, we choose to work with nonprofit clients - experienced organizers and passionate advocates working on diverse issues in environmental protection, human rights, early childhood education, access to health care, and community building. We cannot do what they do; but it is wonderful to help them tell their stories and meaningfully engage their constituents online.</p>

<p>Over the last year, we’ve been particularly inspired to have had the chance to collaborate with the Southern Poverty Law Center (SPLC) on the redesign of its website. At the same time, our work with them brought further attention to our team about the many human rights challenges that our country has faced over the last year.</p>

<p>Our initial conversations with SPLC took place days before the death of Eric Garner. And over the year that we’ve been working with the Center, 16 unarmed Black people have been killed by police in the U.S. The Southern Poverty Law Center has been at the forefront of the national conversation about this issue.</p>

<p>If you don’t know SPLC, it is a leading advocacy and educational organization dedicated to fighting hate and bigotry and seeking justice for the most vulnerable members of society. Since 1971, SPLC has been using litigation to fight for civil rights. So hated by the Ku Klux Klan, SPLC’s offices were burned to the ground in 1983 by Alabama Klansmen. Then, in 1987 SPLC won a historic $7 million verdict against the United Klans of America for the 1981 lynching of Michael Donald - effectively bankrupting the KKK and crippling their organization.</p>

<p><img src="/assets/images/blog/SPLC_fight.jpg" alt="SPLC_fight.jpg" /></p>

<p>In addition to its fight against hate and extremism, SPLC works on a range of human rights issues, such as children’s rights, immigrant justice, economic justice, mass incarceration, and LGBT rights. And so, fortunately, in addition to watching SPLC weigh in tirelessly on the police’s deadly use of force this year, we have also been able to celebrate with its staff over the landmark win over gay marriage bans, as well as the 50th Anniversaries of the March on Selma and the Passage of the Voting Rights Act of 1965.</p>

<p>Again, we have nothing to do with the success of this organization, but to collaborate with this team and to be close to their work has been incredible. We couldn’t be more proud of the website that we designed and implemented along with SPLC’s incredible communications team. Over the next few weeks, we will be writing about the many technical and process innovations we had the chance to implement with the SPLC team. In the meantime, we hope that you will take some time to explore their <a href="https://www.splcenter.org/">new site</a> and to join us in celebrating and supporting their mission.</p>
]]>
  </description>
  <pubDate>Fri, 21 Aug 2015 11:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/08/relaunching-splc/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/08/relaunching-splc/</guid>
</item>

    
      <item>
  <title>Media Optimization for Selma, Bridge to the Ballot</title>
  <description>
    <![CDATA[<p>Imagine for a moment: you’ve just finished making the most gorgeous website you’ve ever made. It’s got the works — the newest, wiz-bang plugins. Heck, you don’t even have to support IE 6-8. You’ve achieved what I like to call “made in the shade.” These creations work well until you release them from their controlled environment. Out in the wild, websites, mobile applications, and other connected devices have to contend with lots of requests, network latency, bandwidth and other things. They get slow in the wild. This fabulous creation has no control over network congestion and user device capabilities. You do have control over how many requests your page makes to the serve and the size of those requests. Remember these two things:</p>

<ul>
  <li>
    <p>Speed is a feature</p>
  </li>
  <li>
    <p>Make the first request count</p>
  </li>
</ul>

<p>ThinkShout worked with the Southern Poverty Law Center to launch <a href="http://selma.splcenter.org/">Selma — Bridge to the Ballot</a>. It’s a single-page site that includes a background video, a video trailer, photo gallery and a nice, clickable timeline. I had the opportunity to make front end optimizations on this site.</p>

<p>To make your site load fast, you should spend time reducing the size of your assets where possible. Also we should do what we can to get the HTML and CSS down to the user as soon as possible. This is called optimizing for the<a href="https://docs.google.com/presentation/d/1IRHyU7_crIiCjl0Gvue0WY3eY_eYvFQvSfwQouW9368/present?slide=id.gc57996a9_046"> critical rendering path</a>. This is the approach we took on the Selma website.</p>

<p>Most of the work happened on 4 types of assets — video, images, CSS/JS and Fonts.</p>

<h2 id="benchmarking">Benchmarking</h2>

<p>Chrome developer tools for measuring the load times, file sizes and network requests. There is also a featured called<a href="https://developer.chrome.com/devtools/docs/device-mode"> device mode</a>. You can emulate a variety of mobile devices and simulate network speeds with device mode.</p>

<p><img src="/assets/images/blog/selma-media-image_1.png" alt="selma-media-image_1.png" /></p>

<p>After we initially built this site, with no optimization, it weighed in at about 20MB. On Selma, we simulated a normal 3G connection. We measured 76 web requests. On this connection, it took close to 10 seconds before there was any paint on the page. Yes, that’s a huge number, but keep in mind this is just a starting point.</p>

<h2 id="video">Video</h2>

<p>The intro to the site begins with an HTML video as the background. Videos are large, even small ones. We used <a href="http://www.webmproject.org/">WebM</a> format, supported across most modern browsers and an MP4 as a fallback. WebM files are much smaller. Along with the size consideration, we did not want the background video to load on mobile phones. Additionally, on larger screens, the background video needed to pause when a user clicked the “play trailer” button, then play again when the user finished viewing the trailer.</p>

<p>If you put the video tag in the document body, it will load even if you set it to display: you don’t need to put it in your css. A trick we used was to avoid this when writing out the video to only write out the video to the page only when loading on a large screen. We use a loadVideo() function to write out our video. And we only load it when the screen is larger than a phone or resized to larger than mobile.</p>

<p>Here is what we do to load the video when we want. Our examples will assume the use of jQuery because that’s what we used.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Function to write the video to the video container</span>
<span class="kd">function</span> <span class="nx">loadVideo</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="s1">'.video-container'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
		<span class="s1">'&lt;video&gt;'</span> <span class="o">+</span>
			<span class="s1">'&lt;source src="path/to/video.webm"&gt;'</span> <span class="o">+</span>
			<span class="s1">'&lt;source src="path/to/video.webm"&gt;'</span> <span class="o">+</span>
		<span class="s1">'&lt;/video&gt;'</span>
	<span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Initially check the screen size and load the video if we need it</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">width</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">480</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">loadVideo</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// If the window size change and the video isn’t already loaded,</span>
<span class="c1">// load the video</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">resize</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">width</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">481</span> <span class="o">&amp;&amp;</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'.header-video video'</span><span class="p">).</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
 		<span class="nx">loadVideo</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Next, we wanted to pause the video when the pause/play background video ‘play trailer’ button is clicked. The HTML video tag contains javascript methods to manipulate it. We take advantage of two aptly-named methods: play() and pause(). We used the Magnific Popup plugin for our image gallery and video trailer. With this plugin, we are able to supply our play and pause methods as callback methods in to fire in the plugin configuration options.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="s1">'.play-button'</span><span class="p">).</span><span class="nx">magnificPopup</span><span class="p">({</span> 
	<span class="na">callbacks</span><span class="p">:</span> <span class="p">{</span> 
		<span class="c1">// When the our popup opens pause         </span>
		<span class="na">open</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
			<span class="nx">$</span><span class="p">(</span><span class="s1">'video'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pause</span><span class="p">();</span>   
		<span class="p">},</span>  
		<span class="c1">// When our popup closes play                                                                                        </span>
		<span class="na">close</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">$</span><span class="p">(</span><span class="s1">'video'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">play</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>                                                                                                              
<span class="p">});</span>
</code></pre></div></div>

<p>Now when a user plays the trailer, we get what we want with hardly any additional code. The plugin and the HTML5 Javascript API do it for us.</p>

<h2 id="images">Images</h2>

<p>Unoptimized images are assets most responsible for slow load times on the internet. You should compress your images so they render faster. Also, sprite smaller images so they come in as a single request. Wherever possible, use background images. Inline images slow down page rendering. These optimizations are key to doing the most with the first request you make to the server. Remember, we want to get our html and CSS down to our user expeditiously.</p>

<p>A great tool for reducing the size of your images is<a href="https://tinypng.com/"> TinyPNG</a>. You can get<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization#lossless-vs-lossy-image-compression"> lossy</a> compression and still keep the alpha transparency of your images. There are other tools available as well such as Yahoo’s<a href="http://www.imgopt.com"> Smush.it</a>.</p>

<p>If you have large background images, create mobile versions of those images. When your site loads on mobile, those images will be applied without any additional web requests.</p>

<p>Finally, choose the right image format. If you don’t need transparency, use a jpg. If you need better detail in your images use a PNG. If you need animation, use a GIF. Using a PNG for a large background image will unnecessarily cause your user to download a huge file.</p>

<h2 id="css-and-js">CSS and JS</h2>

<p>The faster you get the HTML and CSS down, happier the site user will be. It’s been shown that a user likes to have content rendering within at least three seconds of requesting the page. A user would rather see progressive rendering of the page than a blank page and then have everything load all at once.</p>

<p>Where we declare our CSS/JS matters. Put stylesheets and scripts used for your above-the-fold content in the head of your document. The CSS/JS we needed for our video and splash image are included in the head of our document.</p>

<p>Do just the opposite for scripts you need last. On the Selma, site we use a plugin called <a href="http://timeline.knightlab.com">TimelineJS</a>. TimelineJS has several requests associated with the plugin, including images from Flickr. We declared that script right before the close of our body tag. Why? We don’t need it until way the user gets to the bottom of our page. If we included it in the head we would be blocking HTML CSS and JS needed to get above the fold content to the user. This is another form of progressive enhancement.</p>

<p>Lastly, aggregate your CSS and JS so you don’t make unnecessary server requests. In our case, we use<a href="https://github.com/ixti/jekyll-assets"> Jekyll Assets</a> for our asset pipeline. This plugin will let us compress our CSS with <a href="http://sass-lang.com/">Sass</a> and JS with<a href="https://github.com/lautis/uglifier"> Uglifier</a>. Fewer CSS and JS requests get painted on to the browser quickly.</p>

<h2 id="fonts">Fonts</h2>

<p>Fonts that are already on your user’s computer don’t cost you any extra. On Selma, we realized we had a font that looked almost identical to Georgia. Using @font-face will make a request for the font files you need. So we got rid of the custom font we were using. There are about four files for each font. So if you have one font, but that font has a regular, bold, and italic typeface, you’ve just made 12 server requests for that font.</p>

<p>In addition, if you are going to use @font-face, use an appropriate fallback font. I say appropriate because when your font finally loads, you don’t want it to be a jarring experience for the user.</p>

<h2 id="summary">Summary</h2>

<p>In the end, were able to get our site down to 1.4MB, and painting to the page in less than 1 second on a normal 3G network. We now have 43 requests and our entire DOM is loaded in 2.45 seconds on this connection. There is a lot more fine tuning we can do here. But this shows how snappy you can make your site just by doing basic optimizations around the aforementioned 4 types of assets.</p>

<p>Be mindful of bandwidth and network latency. Reduce image size. Aggregate CSS/JS. Delay blocking JS. These are easy things any front end developer can do to optimize websites and make users happy. I am a fan of <a href="https://www.igvita.com/">Ilya Grigorik</a>, web performance engineer at Google. He is a great resource on the subject. He also has a book you can read called <em>High-Performance Browser Networking</em>. It’s a great resource on web optimization.</p>

<p>The Selma site launched just in time for the 50th anniversary of the Selma-to-Montgomery marches. As users from around the world accessed the site to commemorate the events of Bloody Sunday, even those with low bandwidth connections could learn about this pivotal moment in the Civil Rights Movement for themselves on the web.</p>
]]>
  </description>
  <pubDate>Tue, 31 Mar 2015 00:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/03/media-optimization-with-splc/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/03/media-optimization-with-splc/</guid>
</item>

    

  </channel>
</rss>
