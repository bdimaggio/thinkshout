<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/development/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>What the proposed changes in the tax code mean for your organization</title>
  <description>
    <![CDATA[<p>The end of the year is approaching and along with that, the traditional wave of last minute, tax-deductible gifts from supporters.</p>

<p>Or is it?</p>

<p>This uncertainty around tax-deductible gifts isn’t a commentary on the ever-fluctuating state of affairs at your organization or in our country, rather it’s about <a href="http://www.thenonprofittimes.com/news-articles/nonprofits-hammered-federal-budget-proposal/">proposed changes to the tax code</a>. These changes, should they come to pass, could alter the long-held tradition of donors looking to get that extra tax break with their year-end gift – and not to your advantage.</p>

<p>The proposal currently being considered by Congress aims to reduce or eliminate key tax breaks for giving, and that rightfully has many organizations concerned. There has been speculation that the tax plan could reduce giving between <a href="http://money.cnn.com/2017/08/06/news/economy/tax-reform-charitable-giving/index.html">$5 - $13 billion per year (or 4.6%)</a>. It won’t kill all charitable giving, about 5% of people will continue to itemize, specifically those in a higher income bracket.</p>

<p>This poses a shift in incentives, as the purpose of the charitable tax deductions was to inspire a sense of altruism among people in varying stages of wealth – but particularly the middle class. As it’s being proposed, the new plan only incentivizes giving for the richest among us. The one-percenters. And while those major donors are highly valued at your organization, I’m willing to bet the bulk of your file is not made up of 4, 5, and 6-figure one-time gifts.</p>

<p>So why are we talking about this? For one, in the various conversations I’ve had with nonprofits since this news broke earlier in the year, it seems many organizations are either unaware of the impact the tax plan has on them, or feel their energy is better spent on things they can control.</p>

<p class="center"><img src="/assets/images/blog/tim-gunn.gif" alt="TimGunn" /></p>

<h2 id="lets-talk-about-that">Let’s talk about that.</h2>

<p>While the new tax plan has yet to become law, the uncertainty donors are facing about many of the points in the tax plan may already be influencing their gift-giving behavior. How you planning to pivot your messaging to reflect the fact that you can’t confidently close your messages with the tagline, “You’ll be happy you gave come April 15th!”</p>

<p>We’re not suggesting people will stop giving altogether, because we know that <a href="https://www.psychologytoday.com/blog/out-the-darkness/201501/happiness-comes-giving-not-buying-and-having">giving makes people feel good</a> – it increases serotonin levels and has been proven to be good for your health (hey, <a href="http://www.huffingtonpost.com/brady-josephson/want-to-be-happier-give-m_b_6175358.html">science says so!</a>).</p>

<p class="center"><img src="/assets/images/blog/passion.jpg" alt="Passion" /></p>
<p><span class="caption"><i class="fa fa-caret-up"></i>Photo by Ian Schneider on Unsplash</span></p>

<p>However, what this does tell us is that we need to think critically and strategically about how we’re going to move beyond this antiquated, deadline driven approach so that your constituents feel inspired to support you; not just when it may be of convenience to them, but year-round. In fact, making the claim that a donation is tax-deductible has zero exclusivity – it’s something all nonprofits have leaned on for decades, and it’s time to step it up and talk about what you actually accomplish day in and day out.</p>

<h2 id="impact-driven-approach">Impact-driven approach</h2>

<p>Motivating your constituents is all about making your case. The list of reputable organizations to support continues to grow each year. There is palpable competition in the inbox to grab the attention of your supporters. How can you stand out in the sea of appeals? We recommend focusing on an impact-driven approach.</p>

<p>What this boils down to is <strong>good storytelling</strong>. Sharing content that shows how you’re saving lives, improving your community, enriching the world we live in…<em>all</em> the positive contributions that would not be possible without your organization.</p>

<p>This goes beyond saying “we provided 5,000 people with [enter a valuable service here].” <a href="http://clairification.com/2012/05/06/one-incredibly-dramatic-way-to-create-winning-content/">It’s about telling the story of one</a>. Or, at least telling a compelling story of how you affect change. Donors empathize more with these stories, and their likelihood to make a gift increases if they have a tangible, real example of an individual or specific scenario that was the result of the important work you do. Large numbers tell a story in broad strokes, but the details and impact of one life or one specific outcome is ultimately more meaningful and more likely to be remembered.</p>

<h2 id="how-do-i-go-about-doing-this">How do I go about doing this?</h2>

<p>If you’re thinking this approach sounds time consuming, you’re right. It is. Content curation is one of those things that is either incredibly easy or seemingly impossible depending on the resources available to you.</p>

<p>If you’re at an organization facing the latter situation, don’t fret, just start <em>somewhere</em>.</p>

<p class="center"><img src="/assets/images/blog/begin.jpg" alt="Begin" /></p>
<p><span class="caption"><i class="fa fa-caret-up"></i>Photo by Danielle MacInnes on Unsplash</span></p>

<p>Talk to volunteers or people in the field about what they experience and see. Ask them about the people they interact with and what their stories are. Talk to the people in the community you serve; or collect user-generated content and story submissions directly on your site, through facebook, or email. If you take this last approach, be clear about how you plan to use their story; and ask for permission to use their photo, name, or other identifiable information if you plan to include it.</p>

<p>As time-consuming as this approach is, I can say from experience that it works. The more personal stories are the ones that will build relationships with your supporters and turn them into multi-channel, multi-year supporters. They won’t remember the big numbers you share, but they’ll remember the story of that one individual; a child, an animal that was rescued, a family that now has a home… stories touch the heart in ways numbers simply can’t.</p>

<h2 id="this-wont-work-for-me-the-people-i-serve-need-to-remain-anonymous">This won’t work for me, the people I serve need to remain anonymous</h2>

<p>This is a common issue: how do we create a sense of empathy and human connection when people don’t want us to tell their personal stories or use their real information? Answer: You develop a composite scenario.</p>

<p>I worked for and with food banks for many years. Initially I started as nonprofit staff in the development department and years later, on the agency side as a consultant. A composite story was necessity. Without it, all we had to go on was that $1 = 6 meals. And knowing you provided 6 meals is great, but knowing one of those meals went to a child in an after school program, that they’d be sent home with food they most certainly would not be getting otherwise…this paints a very different picture. This, among other composite stories, was very common among the people we served. <strong>A composite story preserves the dignity and privacy of your subjects while telling a story that rings true to your mission.</strong></p>

<p class="center"><img src="/assets/images/blog/child-cereal.jpg" alt="Child with cereal" /></p>
<p><span class="caption"><i class="fa fa-caret-up"></i>Photo by Providence Doucet on Unsplash</span></p>

<p>You also don’t have to include a photo of the subject in question. I’m not suggesting you omit photo usage altogether; your imagery can be something mission-related but not specific to the subject in question. Focus on the hands of volunteers, or a group of people at an event, for example.</p>

<p>This is very common practice for nonprofits. Luckily, there are <a href="https://www.thebalance.com/fundraising-stories-when-confidentiality-is-important-2501840">resources</a> out there to guide you when it comes to maintaining transparency in your messaging while successfully sharing the impact of your work. In the age of Instagramming every moment, imagery and photography is central to effective storytelling.</p>

<h2 id="parting-thoughts">Parting Thoughts</h2>

<p>We’re keeping a close eye on the tax plan as it develops, as much of it has the potential to impact not only our work but our personal lives. Whether the plan goes through or not, my hope is that we see people giving not because of the potential for a kickback, but because being altruistic and helping each other and our planet is just better for everyone.</p>

<p>The work of a nonprofit is never done, almost sisyphean in nature. Once you think the hardest task is complete, you have to roll the boulder up another mountain. It’s easy to become jaded and feel that you’ll never make progress. I promise you, that is not true.</p>

<p>Look around you, collect those stories. Read them. Share them. I hope you and your donors are inspired by the work you do. I know that at ThinkShout, we are inspired every day by the work of our clients and feel fortunate to have a hand in making it possible for them to share their stories with the world. Whatever the end of 2017 brings, my hope is that you are fearless in trying new things and that you are not easily dissuaded.</p>
]]>
  </description>
  <pubDate>Sat, 02 Dec 2017 07:30:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2017/12/changes-in-tax-code/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2017/12/changes-in-tax-code/</guid>
</item>

    
      <item>
  <title>Porting ThinkShout to Drupal 8</title>
  <description>
    <![CDATA[<p>A fundamental part of ThinkShout’s philosophy and business is to not only use great open source tools, but to <a href="http://thinkshout.com/blog/2015/03/the-how-and-why-of-open-source/">actively give back</a> to the open source community. The most recognizable part of that contribution is in the form of Drupal modules: over 60,000 Drupal sites run on ThinkShout technology! This strategy has been a huge <a href="http://thinkshout.com/blog/2014/09/small-business-of-nonprofits/">win for our clients</a>, who get features, bugfixes, and security updates from the community because they are sharing code. We benefit from this work as well, as it enhances our profile in the community and helps us generate leads for new projects. Of course, the vast majority of these sites are built on Drupal 7, which <a href="https://www.drupal.org/drupal-7-released">released</a> in the same month that <a href="http://thinkshout.com/blog/2016/01/five-years/">ThinkShout was founded</a>.</p>

<p>The exciting and much-anticipated release of Drupal 8 has given us a lot to think about. Internally, we’ve been running a Drupal 8 “book club” to give our development team a chance to dive in and figure out what’s going on with D8. While we’ve bathed in the glories of Composer, Twig, and YAML files galore, we’ve also had a chance to start upgrading a few of our favorite modules to Drupal 8!</p>

<p>With support from the incredible folks over at <a href="http://mailchimp.com/">MailChimp</a>, we’ve already got a working release of the <a href="https://www.drupal.org/project/mailchimp">MailChimp integration module</a> for Drupal 8, and are hard at work on the <a href="https://www.drupal.org/project/mandrill">integration with Mandrill</a>, MailChimp’s awesome transactional email service, which may have a Drupal 8 release before this blog post goes live.</p>

<p>This is a great start, but it’s really only the tip of the iceberg: ThinkShout has about 50 modules released for Drupal 7! As much as we’d love to dive in and update all of them for Drupal 8 today, that’s not particularly practical. To better focus our work, I analyzed some of these modules so we can prioritize them and look for opportunities to work with our partners and clients to get the most useful, popular, and important modules upgraded to Drupal 8 first.</p>

<p>Of our 50 modules, we started by de-prioritizing anything that was:</p>

<ul>
  <li>
    <p>Extremely narrow in purpose (<a href="https://www.drupal.org/project/er_plus">Entity Reference Plus Data</a>)</p>
  </li>
  <li>
    <p>Blocked by another module’s Drupal 8 development (<a href="https://www.drupal.org/project/apachesolr_geo">Apache Solr Geo</a>, lots of others)</p>
  </li>
  <li>
    <p>Offers modest functionality replaceable by custom code (<a href="https://www.drupal.org/project/footer_message">Footer Message</a>) or</p>
  </li>
  <li>
    <p>Just not seeing much usage (<a href="https://www.drupal.org/project/instagram">Instagram Realtime</a>)</p>
  </li>
</ul>

<p>That left us with around 10 projects, among them MailChimp and Mandrill, which we were already working on. We wanted to pick a manageable number of these remaining modules to get started on.</p>

<p>Based on community usage, the priorities of our clients, and perceived usefulness, it was clear that the <a href="https://www.drupal.org/project/registration">Registration module</a> belonged on this list. The story of Registration’s development is connected to the story of ThinkShout’s fledgling years and open source philosophy, so it’s an added bonus that Registration will be part of our early push into Drupal 8.</p>

<p>ThinkShout has also carved out a reputation as experts in the CRM world, with <a href="https://www.drupal.org/project/redhen">RedHen</a>, our leading Drupal-integrated CRM, and the <a href="https://www.drupal.org/project/salesforce">Salesforce Suite</a>, a fabulous tool for integrating Drupal sites with Salesforce. Though these modules don’t have the 5-digit usage numbers that Registration or MailChimp have, they still have lots of users who are very engaged, and are central to the needs of our clients. We added them to the top of the list for Drupal 8 consideration.</p>

<p>In thinking about the rest of our modules and the nature of our work, it became clear that these three projects really stand out from the rest: they are our “Big 3”, and we set about creating a roadmap for developing them on Drupal 8.</p>

<p>You can already see the beginnings of this work! At our team sprint on February 11, we put together an outline for bringing RedHen to Drupal 8, and pushed the first commits to Drupal.org.</p>

<p><img src="/assets/images/blog/porting-thinkshout.jpg" alt="porting-thinkshout.jpg" />
<em>These are our sprint faces!</em></p>

<p>As of February 11, all of the Big 3 have nominal Drupal 8 branches.</p>

<p>As we kick off four Drupal 8 sites in the first part of this year, we will be working with our clients to bring Registration, RedHen CRM, and Salesforce Suite to Drupal 8. All three should update beautifully, as they are built on top of Entity API, which is part of Core in D8.</p>

<p>We will also be focusing our internal open source contribution hours on these three projects to kickstart their jump into the Drupal 8 sea. If you’re looking for awesome CRM or registration systems for your Drupal 8 site, fear not! They are on their way.</p>

<p>We have two Drupal 8 sites utilizing ThinkShout core technologies scheduled for launch this summer, so look for a release of RedHen in the spring!</p>

<p>Our next round of prioritization will depend significantly on the progress of Commerce solutions in Drupal 8: once that landscape settles, we have some projects that will jump up that priority list, including:</p>

<ul>
  <li>
    <p><a href="https://www.drupal.org/project/registration_commerce">Registration Commerce</a>, our favorite paid registration solution</p>
  </li>
  <li>
    <p><a href="https://www.drupal.org/project/redhen_donation">RedHen Donation</a>, our CRM-integrated, single-page donation tool</p>
  </li>
  <li>
    <p><a href="https://www.drupal.org/project/commerce_iats">Commerce IATS</a>, the payment integration module for our favorite nonprofit-focused payment processing partner, <a href="http://home.iatspayments.com/">iATS Payments</a></p>
  </li>
</ul>

<p>So if you’re a fan of our Commerce integrations, or <a href="https://www.drupal.org/project/addtocal">Add to Cal</a>, or even little <a href="https://www.drupal.org/project/bean_entity_view">Bean Entity View</a> (I know I am): stay tuned! We love these tools, we love that you’re using them, and we look forward to bringing you even more awesome stuff for Drupal 8 than we have for Drupal 7!</p>

]]>
  </description>
  <pubDate>Tue, 23 Feb 2016 10:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2016/02/porting-thinkshout-to-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/02/porting-thinkshout-to-drupal-8/</guid>
</item>

    
      <item>
  <title>Up and Theming with Drupal 8</title>
  <description>
    <![CDATA[<p>Drupal 8 is <a href="https://www.drupal.org/8">finally here</a>! We’ve been digging into the code and learning how to install D8 in a way that allow us to sync sites and use it for production work. A lot of things have changed, which we covered in our previous article, <a href="http://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/">Up and Running with Drupal 8</a>. The next step is to see what’s changed in the theming layer, installing a basic theme, and working with the new Twig templating system. There’s a good deal to cover, so let’s <a href="http://twig.sensiolabs.org/">jump in</a>!</p>

<h2 id="creating-a-theme">Creating a Theme##</h2>

<p>The steps for setting up a basic site theme are fairly simple: create a <code class="highlighter-rouge">custom/THEMENAME</code> directory in <code class="highlighter-rouge">web/themes</code>, and then add a <code class="highlighter-rouge">THEMENAME.info.yml</code> file with the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">THEMENAME Theme</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">D8</span><span class="nv"> </span><span class="s">theme</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">THEMENAME</span><span class="nv"> </span><span class="s">site.'</span>
<span class="na">package</span><span class="pi">:</span> <span class="s">Custom</span>
<span class="c1"># base theme: classy</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">theme</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">1.0</span>
<span class="na">core</span><span class="pi">:</span> <span class="s">8.x</span>
<span class="na">regions</span><span class="pi">:</span>
  <span class="na">header</span><span class="pi">:</span> <span class="s">Header</span>
  <span class="na">content</span><span class="pi">:</span> <span class="s">Content</span> <span class="c1"># required!</span>
  <span class="na">sidebar_first</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Sidebar</span><span class="nv"> </span><span class="s">first'</span>
  <span class="na">footer</span><span class="pi">:</span> <span class="s">Footer</span>
</code></pre></div></div>

<p>Then you can enable your theme (<code class="highlighter-rouge">administer » themes</code>) in the interface. Note that uncommenting  <code class="highlighter-rouge">base theme: classy</code> will cause you to set Classy as a parent theme. We feel that Classy is great if you want a lot of useful examples, but really clutters up the markup, so use at your own discretion. <a href="https://www.drupal.org/node/2575421">After rc1</a>, the default theme will be ‘stable,’ and you may want to pull all of the core templates into your theme to ensure you’re working from the latest updated template code.</p>

<p>Also, the theme name must not contain hyphens. So <code class="highlighter-rouge">/theme-name/</code> is invalid (it won’t even show up!), but <code class="highlighter-rouge">/theme_name/</code> is fine.</p>

<p>Now we’ll want to start customizing our theme. Let us say we have a content type called ‘blog’ (machine name: <code class="highlighter-rouge">blog</code>), with a field type called ‘Publish Date’ (machine name: <code class="highlighter-rouge">field_publish_date</code>).</p>

<p>Despite setting the label of <code class="highlighter-rouge">field_publish_date</code> to ‘inline,’ it’s wrapping to a new line due to the fact that it’s a simple, unstyled <code class="highlighter-rouge">&lt;div&gt;</code>.</p>

<p>Worse, it has no classes to specifically style it. Let’s set ourselves some goals:</p>

<ol>
  <li>Add the inline styling class(s).</li>
  <li>Change the markup for this field, so that we have a class for the label.</li>
  <li>Add CSS to style the label, but ONLY for the ‘Blog’ content type.</li>
</ol>

<p>The documentation for this seemingly simple task is obfuscated and evolving right now, but we were able to get it working correctly using the following steps:</p>

<p><strong>Step 1</strong>: Turn on <a href="https://www.drupal.org/node/1906392">twig debug mode</a>. We also found it helpful at this point to make a copy of <code class="highlighter-rouge">web/sites/example.settings.local.php</code> in <code class="highlighter-rouge">web/sites/default/</code> and uncomment the following in <code class="highlighter-rouge">settings.php</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">'/settings.local.php'</span><span class="p">))</span> <span class="p">{</span>
  <span class="k">include</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">'/settings.local.php'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will allow you to <a href="https://www.drupal.org/node/2598914">disable caching</a> during development, which is no longer a simple checkbox in the performance section. Note that disabling caching can be tricky; the <code class="highlighter-rouge">drush cr</code> (cache rebuild) command is the most reliable way to ensure the cache is really cleared. You’ll also have to rebuild the cache at least once after turning caching off, so the new cache settings are applied.</p>

<p><strong>Step 2</strong>: Make a custom field template.</p>

<p>In this case, the suggested debug fields are:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- FILE NAME SUGGESTIONS:
   * field--node--field-publish-date--blog.html.twig
   * field--node--field-publish-date.html.twig
   * field--node--blog.html.twig
   * field--field-publish-date.html.twig
   * field--datetime.html.twig
   x field.html.twig
--&gt;</span>
<span class="c">&lt;!-- BEGIN OUTPUT from 'core/modules/system/templates/field.html.twig' --&gt;</span>
</code></pre></div></div>

<p>The highlighted line above shows the template currently being used, suggestions for increased specificity, and the file location (<code class="highlighter-rouge">core/modules/system/templates/</code>).</p>

<p>We want to update <code class="highlighter-rouge">field_publish_date</code> globally, so we’ll create a template called <code class="highlighter-rouge">field--field-publish-date.html.twig</code></p>

<p>To do this, we copy <code class="highlighter-rouge">field.html.twig</code> from the core theme (see the ‘BEGIN OUTPUT’ line above for the path), and rename it in our theme’s folder to <code class="highlighter-rouge">field--field-publish-date.html.twig</code>. Now when we reload, we see the following (if your cache is disabled, of course, otherwise drush cr will clear the cache):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- FILE NAME SUGGESTIONS:
   * field--node--field-publish-date--blog.html.twig
   * field--node--field-publish-date.html.twig
   * field--node--blog.html.twig
   x field--field-publish-date.html.twig
   * field--datetime.html.twig
   * field.html.twig
--&gt;</span>
<span class="c">&lt;!-- BEGIN OUTPUT from 'themes/custom/THEMENAME/templates/field--field-publish-date.html.twig' --&gt;</span>
</code></pre></div></div>

<p>Now we can begin to update the markup. The relevant code is:</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if label_hidden %}
  ... (we don’t care about the label_hidden stuff)
{% else %}
  <span class="nt">&lt;div</span><span class="err">{{</span> <span class="na">attributes</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span><span class="err">{{</span> <span class="na">title_attributes</span> <span class="err">}}</span><span class="nt">&gt;</span>{{ label }}<span class="nt">&lt;/div&gt;</span>
    ...
{% endif %}
</code></pre></div></div>
<p></p>

<p>To add the inline styling class, we add the following to the top of the template (below the comments):</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%
  set classes = [
    'field--label-' ~ label_display,
  ]
%}
</code></pre></div></div>
<p></p>

<p>And then update the label’s parent div attributes:</p>

<p>before: <code class="highlighter-rouge">&lt;div&gt;</code>
after: &lt;div{{ attributes.addClass(classes) }}&gt;</p>

<p>Now the correct class is in place, but we see no change yet - because the <code class="highlighter-rouge">&lt;div&gt;</code> isn’t populating any classes. To fix that, we add the following, again at the top of the template:</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%
  set title_classes = [
    'field__label',
    'field__publish-date-label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}
</code></pre></div></div>
<p></p>

<p>And update the div:</p>

<p>before: <code class="highlighter-rouge">&lt;div&gt;&lt;/div&gt;</code>
after: <code class="highlighter-rouge">&lt;div {{ title_attributes.addClass(title_classes) }}&gt;{{ label }}&lt;/div&gt;</code></p>

<p>Rebuild the cache (drush cr) and… success! well sort of - we still have to add CSS. Note that we also added a custom class of ‘field__publish-date-label’ in case we want to style it directly.</p>

<p><strong>Step 3</strong>: Add a <code class="highlighter-rouge">THEMENAME.libraries.yml</code> file to hold attachment library definitions.</p>

<p>This is pretty simple; it’s a file with the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">blog</span><span class="pi">:</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">1.x</span>
  <span class="na">css</span><span class="pi">:</span>
    <span class="na">theme</span><span class="pi">:</span>
      <span class="s">css/blog.css</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">js</span><span class="pi">:</span>
    <span class="s">js/blog.js</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dependencies</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">core/jquery</span>
</code></pre></div></div>

<p>We then add the directories (<code class="highlighter-rouge">/css</code> and <code class="highlighter-rouge">/js</code>) and files (<code class="highlighter-rouge">blog.css/js</code>). We’ve also added a jQuery dependency, just so you can see how that’s done. If we had something simple that could be done with <a href="http://vanilla-js.com/">Vanilla JS</a> we could leave it off. Note that this won’t actually do anything until we follow step 4 below.</p>

<p><strong>Step 4</strong>: Add a <code class="highlighter-rouge">THEMENAME.theme</code> file to hold theme hooks (this is actually a PHP file, so start it with <code class="highlighter-rouge"><span class="cp">&lt;?php</span></code>).</p>

<p>This is the code that appends the library based on the content type. The trickiest part of this is figuring out the correct format of <code class="highlighter-rouge">hook_preprocess_HOOK()</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">THEMENAME_preprocess_node__blog</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$variables</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$variables</span><span class="p">[</span><span class="s1">'#attached'</span><span class="p">][</span><span class="s1">'library'</span><span class="p">][]</span> <span class="o">=</span> <span class="s1">'THEMENAME/blog'</span><span class="p">;</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The theme hook format for content types is to use <code class="highlighter-rouge">node__MACHINENAME</code> format - two underscores.</p>

<p>After that, rebuild your cache (<code class="highlighter-rouge">drush cr</code>), and your CSS and JS files should be loading on every instance of that content type, regardless of the page. (full or teaser)</p>

<p>And that’s it! Note that we could have changed the markup in any number of ways to suit our designs, or even make the template specific to the content type as well as the field.</p>

<h3 id="disclaimer">Disclaimer###</h3>

<p>The post was written at the end of 2015 while Drupal 8 was still in a Release Candidate stage. While some effort will be made to keep the post up-to-date, if it’s after 2016, you should probably add the current year to your Google search, or better yet, check the docs on <a href="http://drupal.org">Drupal.org</a>.</p>
]]>
  </description>
  <pubDate>Mon, 23 Nov 2015 06:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2015/11/up-and-theming-with-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/11/up-and-theming-with-drupal-8/</guid>
</item>

    
      <item>
  <title>Up and Running with Drupal 8</title>
  <description>
    <![CDATA[<p>It’s November 2015, and Drupal.org is rolling out <a href="https://www.drupal.org/project/drupal">Drupal 8 release candidates</a>! Heck, Drupal 8 is coming out <em>this week</em>. For many devs, that means we need to figure out how to install, sync, and set up a site theme. Here at ThinkShout, learning is part of the job - we have dedicated time every week to learn new things and share them, be it in a blog post, at our weekly engineering meetings, or at our weekly team lunch.</p>

<p>For the last few months, we’ve made learning Drupal 8 our singular focus. The ‘D8 Bookclub’ has been getting assignments, doing their homework, and sharing their findings internally. We’ve now spent enough time with Drupal 8 that we can share what we’ve learned, the little gotchas and hard-to-find code snippets, as well as the general change in philosophy that has occurred in the shift from D7 to D8.</p>

<p>We generally agree that one of the things keeping people from digging into Drupal 8 is the difficulty of getting it installed and running in a deployable way, which is a must-have if you want to have a team working on a project. This article will walk you through Drupal 8 installation and configuration sync. The follow-up article (<em>Up and Theming with Drupal 8</em>) will cover theme setup and configuration, so that you can finally get going with theming in D8.</p>

<h2 id="installing-drupal-8">Installing Drupal 8</h2>

<p>The <a href="https://github.com/drupal-composer/drupal-project">composer install</a> method is being widely proposed as the replacement for <code class="highlighter-rouge">drush make</code>. The <code class="highlighter-rouge">composer.json</code> file is to <code class="highlighter-rouge">composer install</code> what a <a href="http://www.drush.org/en/master/make/">drush make</a> file is to <code class="highlighter-rouge">drush make</code>. The drupal-composer github repo has a composer template called <a href="https://github.com/drupal-composer/drupal-project">drupal-project</a> that will get us up and running with just the basics necessary to have a working site.</p>

<p>For command-line manipulation, you’ll need to be using <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a>. Like most dev shops, we use version control (<a href="http://xkcd.com/1597/">Git</a>) as well as a <code class="highlighter-rouge">local-&gt;dev-&gt;test-&gt;live</code> server setup. There are a few gotchas here:</p>

<p>The composer template mentioned above works great for a basic D8 install, but if you want it customized (additional packages, post-install commands, etc), you will have to:</p>

<ul>
  <li><a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile</li>
  <li>unzip the files</li>
  <li>update the <code class="highlighter-rouge">composer.json</code> and <code class="highlighter-rouge">scripts/composer/post-install.sh</code> files</li>
  <li>run <code class="highlighter-rouge">composer install</code> locally.</li>
</ul>

<p>This is the method we’ll be using for the rest of this post.</p>

<p>First, <a href="https://getcomposer.org/doc/00-intro.md">install composer</a>. We’re using OSX with <a href="http://brew.sh/">Homebrew</a>, so this is fairly simple - <code class="highlighter-rouge">brew install composer</code>. Note: after implementing this, add this to your <code class="highlighter-rouge">.bashrc</code> (or similar):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.composer/vendor/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>Next, ensure you have <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a> installed. We prefer the <a href="http://docs.drush.org/en/master/install-alternative/#install-a-global-drush-via-composer">Composer global install</a> approach to make updating Drush as simple as running <code class="highlighter-rouge">composer global update</code>.</p>

<p>Next, <a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile, and unzip it into an appropriate local directory (We use a <code class="highlighter-rouge">~/Sites/</code> directory to hold all of our projects).</p>

<p>Note: the Drupal Composer project updates regularly. If you run into any errors, re-download it. You could alternately create an <a href="https://www.drupal.org/node/2210443">installation profile</a> in the <code class="highlighter-rouge">web/profiles</code> folder, but that seems to be a tad under-documented and still not fully baked.</p>

<p>Now that we have a default site scaffold in place, we can get back to the post-install method. If you want to run the site installer after composer installs Drupal, in the <code class="highlighter-rouge">post-install.sh</code> file, you would add:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>web<span class="p">;</span>drush si <span class="nt">--site-name</span><span class="o">=</span><span class="s2">"SITENAME"</span> <span class="nt">--db-url</span><span class="o">=</span>mysql://root:PASSWORD@HOSTNAME/DBNAME <span class="nt">-y</span><span class="p">;</span><span class="nb">cd</span> ../
</code></pre></div></div>

<p>For the above, replace <code class="highlighter-rouge">SITENAME, PASSWORD, HOSTNAME</code>(we use localhost) and <code class="highlighter-rouge">DBNAME</code>.</p>

<p>One of the D8 Bookclub challenges was completing the installation without any warnings appearing on the Status Reports page at <code class="highlighter-rouge">/admin/reports/status</code>. We also want to specify the configuration sync directory, so that it’s not site-unique.</p>

<p>The trick here is to use a series of permission and site config tweaks. After the site install code above, add the following to your <code class="highlighter-rouge">post-install.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>777 web/sites/default/s<span class="k">*</span><span class="p">;</span>

<span class="c">#Prepare the custom sync directory, which will sit outside of the web root</span>

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> configs <span class="o">]</span>
<span class="k">then </span><span class="nb">mkdir</span> <span class="nt">-m777</span> configs
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">config_directories['sync'] = '../configs';"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">settings['trusted_host_patterns'] = array('SITENAME</span><span class="se">\.</span><span class="s2">dev</span><span class="nv">$'</span><span class="s2">,);"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">chmod </span>444 web/sites/default/s<span class="k">*</span>

<span class="nb">chmod</span> <span class="nt">-R</span> 777 web/sites/default/files
</code></pre></div></div>

<p>This will make the <code class="highlighter-rouge">settings.php</code> file editable, create a sync directory below the web root (bonus security!), add the sync directory path, add the <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!DrupalKernel.php/function/DrupalKernel%3A%3AsetupTrustedHosts/8">trusted host pattern</a> (a new D8 requirement), secure the file, and make the <code class="highlighter-rouge">web/sites/default/files</code> folder globally writable.</p>

<p>Now you’re ready to run the installation! From the base directory, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer <span class="nb">install</span>
</code></pre></div></div>

<p>This will take a while, since it’s downloading Drupal and all the modules.
After initial installation, perform a full export and an immediate import/sync of your site configuration profile. This can be done two ways:</p>

<ol>
  <li>
    <p>Via the gui: <code class="highlighter-rouge">/admin/config/development/configuration/full/export</code></p>

    <p>Save this export file! Any subsequent sites will need this as a starting point so that entity mismatches don’t occur.</p>
  </li>
  <li>
    <p>Via Drush (run from the <code class="highlighter-rouge">/web</code> directory):</p>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-export
drush config-import <span class="nb">sync</span>
</code></pre></div></div>

<p>This will export and then sync all of your config files in the configuration directory we specified in the post-install script.</p>

<p>You would then check in this version of the site - a commit message such as ‘Base Site profile’ would be helpful. Here’s a quick set of command-line git repo creation commands, starting with an installation of hub, the <a href="https://hub.github.com/">command-line wrapper</a> for GitHub (this will allow you to use GitHub’s 2-factor authentication):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>hub
git init
hub create
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s1">'Base Site profile'</span>
git push <span class="nt">--set-upstream</span> origin master
</code></pre></div></div>

<p>After that, you can check out additional sites by creating a directory, cd into that directory, and running a git clone command inside it, such as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:USER/REPOSITORY.git <span class="nb">.</span>
</code></pre></div></div>

<p>Now you can run `composer install to build your clone.</p>

<p>Optional: edit the <code class="highlighter-rouge">post-install.sh prior to running </code>composer install` if you’d like your clone to have a different hostname, db, etc.</p>

<h2 id="syncing-sites">Syncing Sites##</h2>

<p>Site configurations are only exportable to sites that have the same UUID and have synced using the shared base configuration profile. To find your site’s UUID, cd to the web folder of the base site, then run <code class="highlighter-rouge">drush config-get system.site</code>. After that, any new site can be synced using these steps immediately after a fresh install (either via download or Git clone):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-edit system.site <span class="o">(</span>Update the UUID to match the base site<span class="o">)</span>
</code></pre></div></div>

<p>If you manually saved the files, upload the base site config profile, but do not sync it</p>

<p>-OR-</p>

<p>If you cloned the repo, the files should be in place. If the git repo has moved beyond the base install, check out the repo at the ‘Base Site Profile’ stage mentioned above using <code class="highlighter-rouge">git reset --hard $SHA1</code> (where $SHA1 is the SHA of the Base Site Profile)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-import <span class="nt">--partial</span>
</code></pre></div></div>

<p>Important Note: Every new instance MUST start with the same base configuration profile, otherwise you may have entity mismatch issues, even with the partial import. After the initial sync is complete, you can pull in config files via Git and sync will work as expected, even over multiple configuration changes.</p>

<h2 id="creating-a-theme">Creating a Theme##</h2>

<p>This will be covered in our next post: “Up and Theming with Drupal 8.”</p>

<h2 id="disclaimer">Disclaimer##</h2>

<p>The post was written at the end of 2015 while Drupal 8 was still in a Release Candidate stage. While some effort will be made to keep the post up-to-date, if it’s after 2016, you should probably be adding the year you are currently in to your Google search, or better yet, check the docs on <a href="https://www.drupal.org/drupal-8.0">Drupal.org</a>.</p>
]]>
  </description>
  <pubDate>Wed, 18 Nov 2015 08:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</guid>
</item>

    
      <item>
  <title>Relaunching the Southern Poverty Law Center's Website</title>
  <description>
    <![CDATA[<p>When projects get hectic around the office, we remind ourselves “We’re just pushing pixels.” We’re geeks. We sit in an air-conditioned office and play with cutting edge technologies on shiny MacBooks, drinking aeropress coffee.
At the same time, we choose to work with nonprofit clients - experienced organizers and passionate advocates working on diverse issues in environmental protection, human rights, early childhood education, access to health care, and community building. We cannot do what they do; but it is wonderful to help them tell their stories and meaningfully engage their constituents online.</p>

<p>Over the last year, we’ve been particularly inspired to have had the chance to collaborate with the Southern Poverty Law Center (SPLC) on the redesign of its website. At the same time, our work with them brought further attention to our team about the many human rights challenges that our country has faced over the last year.</p>

<p>Our initial conversations with SPLC took place days before the death of Eric Garner. And over the year that we’ve been working with the Center, 16 unarmed Black people have been killed by police in the U.S. The Southern Poverty Law Center has been at the forefront of the national conversation about this issue.</p>

<p>If you don’t know SPLC, it is a leading advocacy and educational organization dedicated to fighting hate and bigotry and seeking justice for the most vulnerable members of society. Since 1971, SPLC has been using litigation to fight for civil rights. So hated by the Ku Klux Klan, SPLC’s offices were burned to the ground in 1983 by Alabama Klansmen. Then, in 1987 SPLC won a historic $7 million verdict against the United Klans of America for the 1981 lynching of Michael Donald - effectively bankrupting the KKK and crippling their organization.</p>

<p><img src="/assets/images/blog/SPLC_fight.jpg" alt="SPLC_fight.jpg" /></p>

<p>In addition to its fight against hate and extremism, SPLC works on a range of human rights issues, such as children’s rights, immigrant justice, economic justice, mass incarceration, and LGBT rights. And so, fortunately, in addition to watching SPLC weigh in tirelessly on the police’s deadly use of force this year, we have also been able to celebrate with its staff over the landmark win over gay marriage bans, as well as the 50th Anniversaries of the March on Selma and the Passage of the Voting Rights Act of 1965.</p>

<p>Again, we have nothing to do with the success of this organization, but to collaborate with this team and to be close to their work has been incredible. We couldn’t be more proud of the website that we designed and implemented along with SPLC’s incredible communications team. Over the next few weeks, we will be writing about the many technical and process innovations we had the chance to implement with the SPLC team. In the meantime, we hope that you will take some time to explore their <a href="https://www.splcenter.org/">new site</a> and to join us in celebrating and supporting their mission.</p>
]]>
  </description>
  <pubDate>Fri, 21 Aug 2015 11:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/08/relaunching-splc/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/08/relaunching-splc/</guid>
</item>

    
      <item>
  <title>Committing to D8 Core - A Little Bit Goes a Long Way</title>
  <description>
    <![CDATA[<p>It was the last day of DrupalCon LA and after a long week of sessions, getting to know fellow Drupalistas, and partying until the wee hours, I mustered what little brainpower I had left and made my way to the “First Timer’s Sprint.” Joined by my ThinkShout colleagues, Joe and Nancy, we arrived with beautiful visions of giving back to our community by contributing in some capacity to Drupal 8 core. And so it begins…</p>

<p><img src="/assets/images/blog/image_1.jpg" alt="image_1.jpg" /></p>

<p>We arrived just in time to set our development environment up with a couple hundred other hopeful contributors, and were pleasantly surprised by how quickly that process went and how helpful the mentors were. As soon as we were all set up, the conference staff sent us on our merry way into the next room.</p>

<p>As you may or may not know, Drupal core is enormous! It can be a big, daunting pile of directories and folders that can go down several levels. For a newer developer (and even more seasoned ones, I hear) it takes a great deal of time to navigate this powerful platform. As a result, I was faced with too many possible issues to work on and very little background for how the contributing process works. I’m willing to bet most engineers have been in a similar situation at one time or another and can likely relate. This experience has a name - it’s called “decision fatigue,” where one is faced with so many possibilities to choose from that they become overwhelmed and may even check out entirely. I was there.</p>

<p>Having recognized this feeling before, I piped up and explained to our mentor that we would work more effectively if we were given a single focus or direction. This seemed to work well, and he provided us with a handful of suggestions. That was all fine and good, but after looking at the “Novice” queue, I felt my deer-in-headlights gaze only worsen. Still hungry for a way to gain some practical experience, I reflected back on the options our mentor suggested. He mentioned that “rerolls are easy,” and that seemed like a good place for me to start.</p>

<p>Seizing the moment, I nabbed the nearest mentor and asked him if he could spare a few minutes to help walk me through a reroll. Fortunately, he had a moment to spare, and pointed me to the documentation. Interestingly, this mentor happened to identify with me as a site-builder with little coding experience, yet he was knowledgeable and knew enough Git tricks to be an active participant in the Drupal issue queues.</p>

<p>With this mentor by my side, we dove into the oldest D8 “needs reroll” issue and went to town. Much to my surprise, this issue didn’t take long, but it also helped that another contributor had already rerolled the patch. No problem! I made a comment stating that the patch had been rerolled, how old the issue was (seven years, in this case), and removed the “needs reroll” tag from the issue. Though it felt like a negligible change, my mentor reassured me that I’d  spared another developer from having to go through the same process and reach the same conclusion. Consequently, the issue had moved on to a more progressive state, and there was much rejoicing.</p>

<p>After that was said and done, I went back to the issue queue feeling a tad more confident. Just moments later, our original mentor rushed excitedly back to our table. “Who wants to commit to core?” he asked. We all looked around at each other, not quite sure what to make of it, and responded with a cautiously optimistic “sure, we can help!”</p>

<p>Everything happened rather quickly, which was surprising considering how long it takes to get an average issue through the complete process. Here’s how it went down: There was an issue. A dev in another sprinting room was asked to write a patch. Another dev revised the patch by improving it slightly, and it was then passed to our table to go through the review process. A dev evaluation was put forth, then the issue was passed back for additional review. Finally, it was submitted to be pushed into core.</p>

<p>This was my first DrupalCon and, little did I know, they have a very important tradition - every DrupalCon sprint ends with a live commit by Dries, the founder of Drupal. Our team was lucky enough to be part of this ritual! So, after a full week of delightful Drupal-related shenanigans, I found myself on stage pressing the enter key on Dries’ computer to push our commit to D8 core. The button was pushed and the explosion of celebration and cheers from the audience was nearly deafening.</p>

<p>In this moment, I truly witnessed the heart of the Drupal community in action - this amazing tool could not exist without a number of developers carefully crafting code in accordance with Drupal best practices, and countless generous individuals attentively reviewing the proposed changes. It really does take a village, and the good news is that it doesn’t require being a coding genius to help out.</p>
]]>
  </description>
  <pubDate>Wed, 27 May 2015 10:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/05/commiting-to-d8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/05/commiting-to-d8/</guid>
</item>

    
      <item>
  <title>The How and Why of Nonprofits Contributing to Open Source</title>
  <description>
    <![CDATA[<p><em>Originally published on February 23rd, 2015 on <a href="http://www.nten.org/articles/2015/the-how-and-why-of-nonprofits-contributing-to-open-source">NTEN.org</a>. Republished with permission.</em></p>

<p>For the last 15 years or so, we’ve seen consistent growth in nonprofits’ appreciation for how open source tools can support their goals for online engagement. Rarely do we run across an RFP for a nonprofit website redesign that doesn’t specify either Drupal or WordPress as the preferred CMS platform. The immediate benefits of implementing an open source solution are pretty clear:</p>

<ul>
  <li>
    <p>With open source tools, organizations avoid costly licensing fees.</p>
  </li>
  <li>
    <p>Open source tools are generally easier to customize.</p>
  </li>
  <li>
    <p>Open source tools often have stronger and more diverse vendor/support options.</p>
  </li>
  <li>
    <p>Open source platforms are often better suited for integration with other tools and services.</p>
  </li>
</ul>

<p>The list goes on… And without going down a rabbit hole, I’ll simply throw out that the benefits of open source go well beyond content management use cases these days.</p>

<p>But the benefits of nonprofits supporting and contributing to these open source projects and communities are a little less obvious, and sometimes less immediate. While our customers generally appreciate the contributions we make to the larger community in solving their specific problems, we still often get asked the following in the sales cycle:</p>

<p>“So let me get this straight: First you want me to pay you to build my organization a website. Then you want me to pay you to give away everything you built for us to other organizations, many of whom we compete with for eyeballs and donations?”</p>

<p>This is a legitimate question! One of the additional benefits of using an open source solution is that you get a lot of functionality “for free.” You can save budget over building entirely custom solutions with open source because they offer so much functionality out of the box. So, presumably, some of that saving could be lost if additional budget is spent on releasing code to the larger community.</p>

<p>There are many other arguments <em>against</em> open sourcing. Some organizations think that exposing the tools that underpin their website is a security risk. Others worry that if they open source their solutions, the larger community will change the direction of projects they support and rely upon. But most of the time, it comes down to that first argument:</p>

<p>“We know our organization benefits from open source, but we’re not in a position to give back financially or in terms of our time.”</p>

<p>Again, this is an understandable concern, but one that can be mitigated pretty easily with proper planning, good project management, and sound and sustainable engineering practices.</p>

<h3 id="debunking-the-myths-of-contributing-to-open-source">Debunking the Myths of Contributing to Open Source</h3>

<p><strong>Myth #1: “Open sourcing components of our website is a security risk.”</strong></p>

<p>Not really true. Presumably the concern here is that if a would-be hacker were to see the code that underlies parts of your website, they could exploit security holes in that code. While yes, that could happen, the chances are that working with a software developer who has a strong reputation for contributing to an open source project is pretty safe. More importantly, most strong open source communities, such as the Drupal community, have dedicated security teams and thousands of developers who actively review and report issues that could compromise the security of these contributions. In our experience, unreviewed code and code developed by engineers working in isolation are much more likely to present security risks. And on the off chance that someone in the community does report a security issue, more often than not, the reporter will work with you, for free, to come up with a security patch that fixes the issue.</p>

<p><strong>Myth #2: “If we give away our code, we are giving away our organization’s competitive advantage.”</strong></p>

<p>As a software vendor that’s given away code that powers over 45,000 Drupal websites, we can say with confidence: there is no secret sauce. Trust me, all of our competitors use Drupal modules that we’ve released - and vice versa.</p>

<p>By leveraging open source tools, your organization can take advantage of being part of a larger <em>community of practice</em>. And frankly, if your organization is trying to do something new, something that’s not supported by such a community, giving away tools is a great way to build a community around your ideas.</p>

<p>We’ve seen many examples of this. Four years ago, we helped a local nonprofit implement a robust mobile mapping solution on top of the <a href="http://leafletjs.com/">Leaflet Javascript library</a>. At the time, there wasn’t an integration for this library and Drupal. So, as part of this project we asked the client invest 20 hours or so for us release the barebones scaffolding of their mapping tool as a <a href="https://www.drupal.org/project/leaflet">contributed Drupal module</a>.</p>

<p>At first, this contributed module was simply a developer tool. It didn’t have an interface allowing Drupal site builders to use it. It just provided an easier starting point for custom map development. However, this 20 hour starting point lowered the cost for us to build mapping solutions for other clients, who also pitched in a little extra development time here and there to the open source project. Within a few months, the Leaflet module gained enough momentum that other developers from other shops started giving back. Now the module is leveraged on over 5,700 websites and has been supported by code contributions from 37 Drupal developers.</p>

<p>What did that first nonprofit and the other handful of early adopters get for supporting the initial release? Within less than a year of initially contributing to this Drupal module, they opened the door to many tens of thousands of dollars worth of free enhancements to their website and mapping tools.</p>

<p>Did they lose their competitive advantage or the uniqueness of their implementation of these online maps? I think you know what I’m gonna say: <em>No!</em> In fact, the usefulness of their mapping interfaces improved dramatically as those of us with an interest in these tools collaborated and iterated on each other’s ideas and design patterns.</p>

<p><strong>Myth #3: “Contributing to an open source project will take time and money away from solving our organization’s specific problems.”</strong></p>

<p>This perception may or may not be true, depending on some of the specifics of the problems your organization is trying to solve. More importantly, this depends upon the approach you use to contribute to an open source project. We’ve definitely seen organizations get buried in the weeds of trying to do things in an open source way. We’ve seen organizations contribute financially to open source projects <em>on spec</em> (on speculation that the project will succeed). This can present challenges. We’ve also seen vendors try to abstract too much of what they’re building for clients up front, and that can lead to problems as well.</p>

<p>Generally, our preferred approach is generally to solve our clients immediate problems first, and then abstract useful bits that can be reused by the community towards the end of the project. There are situations when the abstraction, or the open source contribution, needs to come first. But for the most part, we encourage our clients to solve their own problems first, and in so doing so provide real-life use cases for the solutions that they open source. Then, abstraction can happen later as a way of future-proofing their investment.</p>

<p><strong>Myth #4: “If we open source our tools, we’ll lose control over the direction of the technologies in which we’ve invested.”</strong></p>

<p>Don’t worry, this isn’t true! In fact:</p>

<p><em>Contributing to an open source project is positively selfish.</em></p>

<p>By this I mean that by contributing to an open source project, your organization actually gets to have a stronger say in the direction of that project. Most open source communities are guided by those that just get up and do, rather than by committee or council.</p>

<p>Our team loves the fact that so many organizations leverage our Drupal modules to meet their own needs. It’s great showing up at nonprofit technology conferences and having folks come up to us to thank us for our contributions. But what’s even better is knowing that these projects have been guided by the direct business needs of our nonprofit clients.</p>

<h3 id="how-to-go-about-contributing-to-open-source">How to Go About Contributing to Open Source</h3>

<p>There are a number of ways that your nonprofit organization can contribute to open source. In most of the examples above, we speak to financial contributions towards the release of open source code. Those are obviously great, but meaningful community contributions can start much smaller:</p>

<ul>
  <li>
    <p><strong>Participate in an open source community event.</strong> By engaging with other organizations with similar needs, you can help guide the conversation regarding how a platform like Drupal can support your organization’s needs. Events like <a href="http://myntc.nten.org/eventdetails/precon/drupal">Drupal Day at the NTC</a> are a great place to start.</p>
  </li>
  <li>
    <p><strong>Host a code sprint or hackathon.</strong> Sometimes developers just need a space to hack on stuff. You’d be surprised at the meaningful that connections and support that can come from just coordinating a local hackathon. One of our clients, <a href="http://www.feedingtexas.org/">Feeding Texas</a>, recently took this idea further and hosted a dedicated sprint on a hunger mapping project called <a href="https://github.com/snap-hackathon/snapshot-texas">SNAPshot Texas</a>. As part of this sprint, four developers volunteered a weekend to helping Feeding Texas build a data visualization of Food Stamp data across the state. This effort built upon the work of Feeding America volunteers across the country and became a cornerstone of our redesign of <a href="http://www.feedingtexas.org/">FeedingTexas.org</a>. Feeding Texas believes so strongly in the benefits they received from this work that they felt comfortable <a href="https://github.com/thinkshout/feeding-texas">open sourcing their entire website on GitHub</a>.</p>
  </li>
</ul>

<p>Of course, if your organization is considering a more direct contribution to an open source project, for example, by releasing a module as part of a website redesign, we have some advice for you as well:</p>

<ul>
  <li>
    <p><strong>First and foremost, solve your organization’s immediate problems first.</strong> As mentioned earlier in the article, the failure of many open source projects is that their sponsors have to handle too many use cases all at once. Rest assured that if you solve your organization’s problems, you’re likely to create something that’s useful to others. Not every contribution needs to solve every problem.</p>
  </li>
  <li>
    <p><strong>Know when to start with abstraction vs. when to end with abstraction.</strong> We have been involved in client-driven open source projects, such as the release of <a href="http://drupal.org/project/redhen_raiser">RedHen Raiser</a>, a peer-to-peer fundraising platform, for which the open source contribution needed to be made first, before addressing our client’s specific requirements. In the case of RedHen Raiser, the Capital Area Food Bank of Washington, DC came to us with a need for a Drupal-based peer-to-peer fundraising solution. Learning that nothing like that existed, they were excited to help us get something started that they could then leverage. In this case, starting with abstraction made the most sense, given the technical complexities of releasing such a tool on Drupal. However, for the most part, the majority of open source contributions come from easy wins that are abstracted after the fact. Of course, there’s no hard and fast rule about this - it’s just something that you need to consider.</p>
  </li>
  <li>
    <p><strong>Celebrate your contributions and the development team!</strong> It might sound silly, but many software nerds take great pride in just knowing that the stuff they build is going to be seen by their peers. By offering to open source even just small components of your project, you are more likely to motivate your development partners. They will generally work harder and do better work, which again adds immediate value to your project.</p>
  </li>
</ul>

<p>In conclusion, I hope that this article helps you better understand that there’s a lot of value in contributing to open source. It doesn’t have to be that daunting of an effort and it doesn’t have to take you off task.</p>
]]>
  </description>
  <pubDate>Wed, 25 Mar 2015 00:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/03/the-how-and-why-of-open-source/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/03/the-how-and-why-of-open-source/</guid>
</item>

    

  </channel>
</rss>
