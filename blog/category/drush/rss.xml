<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/drush/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>Using Google Docs and Migrate to Populate Your Drupal Site, Part 2</title>
  <description>
    <![CDATA[<p>In <a href="https://thinkshout.com/blog/2017/01/using-google-docs-and-migrate-to-populate-your-drupal-site-part-1/">Part 1</a>, I talked about using Google Docs + Migrate to populate your site. Now we’re going to do that with the <a href="https://www.drupal.org/project/migrate_google_sheets">Migrate Google Sheets</a> module. Below, I’ll provide the steps to get your own migration up and running, but if you prefer to experiment with a working example, <a href="https://live-mgs-demo.pantheonsite.io/">check out a demo of the Migrate Google Sheets Example module</a> (provided as a submodule within Migrate Google Sheets). <a href="https://docs.google.com/spreadsheets/d/1spS1BeUIzxR1KrGK2kKzAoiFZii6vBHyLx_SA0Sb89M">All content on that site was built using this example Google Sheet</a>.</p>

<h2 id="setup-install-the-module">Setup: Install the Module</h2>

<p>If you’ve already got a Drupal 8 site up and running, <a href="https://www.drupal.org/docs/8/extending-drupal-8/installing-contributed-modules-find-import-enable-configure-drupal-8">you can install the module</a> in any of the normal ways. I’m assuming here that you have access to the site using <a href="http://www.drush.org/en/master/">Drush</a>, as it’s not possible to run migrations through anything but the command line at this time. At ThinkShout, we use composer to build our site distributions, and have <a href="https://github.com/thinkshout/mgs_demo">a repo for building the demo site here</a>.</p>

<h2 id="step-1-creating-your-custom-migration-module">Step 1: Creating Your Custom Migration Module</h2>

<p>The easiest way to get started on your own set of migrations is to copy the migrate_google_sheets_example submodule and rename it something of your own. Let’s say we rename it “my_migration.” Follow these steps:</p>

<ol>
  <li>Rename your .install file to “my_migration.install”, and change the function migrate_google_sheets_example_uninstall to “my_migration_uninstall”.</li>
  <li>Delete the helper submodule “migrate_google_sheets_example_setup” entirely – that is just necessary to build the content types required for the example module, but you shouldn’t need it for your migration module.</li>
  <li>Rename your migrate_google_sheets_example.info.yml as “my_migration.info.yml” and open it up. At the very least, you’ll want to change the name of the migration to “name: my_migration” but you’ll also likely wish to remove the migrate_google_sheets:migrate_google_sheets_example_setup dependency. Mine ended up looking like this:</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">my_migration</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">module</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">My Migrations</span>
<span class="na">core</span><span class="pi">:</span> <span class="s">8.x</span>
<span class="na">package</span><span class="pi">:</span> <span class="s">Migrate</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">migrate_plus</span>
  <span class="pi">-</span> <span class="s">migrate_tools</span>
  <span class="pi">-</span> <span class="s">migrate_google_sheets</span>
  <span class="pi">-</span> <span class="s">redirect</span> 
</code></pre></div></div>

<p>When completed, your module structure should look like this:</p>

<p><img src="/assets/images/blog/google-sheets-migrate-1.png" alt="Module Structure" /></p>

<p>You are now ready to enable your My Migrations module. (Make sure you disable the migrate_google_sheets_example module first, if you’d previously enabled that!)</p>

<h2 id="step-2-create-your-spreadsheet">Step 2: Create Your Spreadsheet</h2>

<p>Assuming you have the Game and Landing page content types, you could now run the migrations in your “My Migrations” module and it will pull the data from the <a href="https://docs.google.com/spreadsheets/d/1spS1BeUIzxR1KrGK2kKzAoiFZii6vBHyLx_SA0Sb89M/edit">Google Sheet</a>.</p>

<p>But since you don’t have permissions to edit that sheet, you’re going to need to copy the existing sheet and create your own to do any customizations.</p>

<p><img src="/assets/images/blog/google-sheets-migrate-2.png" alt="Spreadsheet" /></p>

<p>When this is done, you’ll get a url like this:</p>

<p>https://docs.google.com/spreadsheets/d/YourLongHashIDHere where YourLongHashIDHere is your feed key.</p>

<p>Now you’ll need to publish your new spreadsheet. This is an option under “File” -&gt; “Publish to the web”</p>

<p><img src="/assets/images/blog/google-sheets-migrate-3.png" alt="Spreadsheet" /></p>

<p>To verify that your migration module will be able to see the Google sheet, try opening an anonymous browser window and visiting the Feed version of the url, whose format is this:</p>

<p>https://spreadsheets.google.com/feeds/list/YourLongHashIDHere/SHEET/public/values?alt=json</p>

<p>If visiting that URL throws out a bunch of json, you’re ready to start migrating!</p>

<p>But of course, your current set of migration files still point to the old feed. In the my_migrations/config/install folder, you’ll need to find all instances of our feed string (1spS1BeUIzxR1KrGK2kKzAoiFZii6vBHyLx_SA0Sb89M) and replace them with your feed string.</p>

<h2 id="step-3-decide-which-migrations-to-keep">Step 3: Decide Which Migrations to Keep</h2>

<p>The Migrate Google Sheets Example module provides one Migration Group (games_example) and 6 Migrations. Depending on your site configuration, some of these might be useful, like the menu_links and the blocks migrations, and some of them will not be so useful (like the node_game migration, likely). This is a good time to trim or modify any migrations that aren’t going to be useful for your Drupal site. That being said, here are a few things that the sample migrations demonstrate:</p>

<ul>
  <li>Block UUIDs: When you place a block using the Block Layout screen, the block’s UUID is saved in config. If you’re running a migration over and over, your block’s ID will iterate on its own, but the UUID can remain constant if  you add it to the migration. <a href="https://live-mgs-demo.pantheonsite.io/">In the demo site</a>, this allows us to create a persistent CTA block in the header.</li>
</ul>

<p><img src="/assets/images/blog/google-sheets-migrate-4.png" alt="Module Structure" /></p>

<ul>
  <li>Menu Links parents: You can specify that a menu link item has a parent from within the current migration. This lets us say /bohnanza and /hanabi are children of /games</li>
  <li>Page and Game redirects: These sheets demonstrate how to add the redirect from the url of content on an old site to the new home right in the content sheet. Try going to <a href="https://live-mgs-demo.pantheonsite.io/that-fireworks-game">https://live-mgs-demo.pantheonsite.io/that-fireworks-game</a> and see where you end up.</li>
  <li>Related content as strings or ids: On the Page sheet, we have a reference to the “Related games” for the given page. This is an entity reference which we could fill with a couple of things. We could refer to the ID of the related games, as they are stored in the Games sheet, or we could do what we’ve done here and use the migrate_plus plugin “entity_lookup” to search for the related game node by name. 
As long as there is a Game node called Bohnanza, we’ll always link to the right one. This is particularly useful with Term references, where the name of the item ideally remains constant.</li>
</ul>

<p><img src="/assets/images/blog/google-sheets-migrate-5.png" alt="Related Content" /></p>

<ul>
  <li>Game downloadable file: Games have associated images, which are files hosted externally to the spreadsheet. In order to relate my game content to its image, I need to download the image, get it into the file_managed database table (creating a file entity) and THEN relate that entity to the current node. This is done with the following lines in the “node_games” migration:</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">public_file_directory</span><span class="pi">:</span>
    <span class="na">plugin</span><span class="pi">:</span> <span class="s">default_value</span>
    <span class="na">default_value</span><span class="pi">:</span> <span class="s1">'</span><span class="s">public://'</span>
<span class="err">  </span><span class="na">public_file_uri</span><span class="pi">:</span>
    <span class="na">plugin</span><span class="pi">:</span> <span class="s">concat</span>
    <span class="na">delimiter</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>
    <span class="na">source</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="err">@</span><span class="s">public_file_directory</span>
      <span class="pi">-</span> <span class="s">imagefilename</span>
  <span class="s">field_image/target_id</span><span class="pi">:</span>
    <span class="pi">-</span>
      <span class="na">plugin</span><span class="pi">:</span> <span class="s">file_copy</span>
      <span class="na">source</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">image</span>
        <span class="pi">-</span> <span class="err">@</span><span class="s">public_file_uri</span>
    <span class="pi">-</span>
      <span class="na">plugin</span><span class="pi">:</span> <span class="s">entity_generate</span>
  <span class="s">field_image/alt</span><span class="pi">:</span> <span class="s">imagealt</span>
  <span class="s">field_image/title</span><span class="pi">:</span> <span class="s">imagetitle</span>
</code></pre></div></div>

<p>You can keep as many or as few of the migration files as you’d like. You can also create new ones.</p>

<h2 id="step-4-tell-drupal-about-your-changes">Step 4: Tell Drupal About Your Changes</h2>

<p>Drupal 8 only sees the changes you’ve made to your migration yml files when you first install the module. That means that you need to uninstall and reinstall the module to make new changes show up. <a href="https://github.com/thinkshout/mgs_demo/blob/master/RoboFile.php#L18">ThinkShout has a Robo script that does this</a>, but the same thing can be  done in Drush:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">drush mr --all</span>             <span class="c1"># Rolls back all migrations</span>
<span class="s">drush pmu my_migration -y</span>  <span class="c1"># Disables my migration module</span>
<span class="s">drush en my_migration -y</span>   <span class="c1"># Enable my migration module</span>
<span class="s">drush ms</span>                   <span class="c1"># Displays my current migration status</span>
</code></pre></div></div>

<p>You can also string these together as one line:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">drush mr --all &amp;&amp; drush pmu my_migration -y &amp;&amp; drush pmu my_migration -y &amp;&amp; drush ms</span>
</code></pre></div></div>

<h2 id="step-5-run-your-migrations">Step 5: Run your migrations</h2>

<p>This part is simple. To run all migrations, it’s a quick drush command:</p>

<p><code class="highlighter-rouge">drush mi --all</code></p>

<p>If you’d like to find out about all the possible options for the migrate-import command, you can run</p>

<p><code class="highlighter-rouge">drush help mi</code></p>

<p>You can also see your list of migration groups at /admin/structure/migrate, and you can review your migrations by clicking “List Migrations.” The resulting page will give you the same output, more or less, that you get from running a <code class="highlighter-rouge">drush ms</code>.</p>

<p><img src="/assets/images/blog/google-sheets-migrate-6.png" alt="Migrations" /></p>

<p>These pages are helpful to know about, as they give you an easy place to find errors logged during the migration process. However, you can’t currently run a migration from the UI (<a href="https://www.drupal.org/node/2470882">although there is an issue for this</a>).</p>

<h2 id="gotchas">Gotchas</h2>

<p>But before we close, I do want to acknowledge some challenges we’ve seen in this approach.</p>

<p>Sad fact #1: HTML in a spreadsheet is ugly.</p>

<p>Google Spreadsheets don’t let you make your rows smaller than the number of line breaks in a cell. So if you have pretty html with a bunch of line breaks, your row might be too tall to fit on your screen. <a href="http://webapps.stackexchange.com/questions/6953/in-a-google-spreadsheet-how-can-i-force-a-row-to-be-a-certain-height">People have some clever workarounds for this</a>, but so far we’ve not implemented any.</p>

<p>Sad fact #2: Sheet order matters (right now)</p>

<p>Maintaining the order of sheets isn’t top on everyone’s minds as they’re making changes to a spreadsheet, especially when duplicating tabs. Migrate Google Sheets asks for each sheet based on tab order. If I make a copy of the Page tab, the Game tab is now the fourth tab instead of the third tab.</p>

<p><img src="/assets/images/blog/google-sheets-migrate-7.png" alt="Copy of page" /></p>

<p>As it stands now, the module will happily request columns that don’t exist on the third tab and then fail in puzzling ways.</p>

<p>There is currently <a href="https://www.drupal.org/node/2822948">only one issue</a> in the issue queue for the Migrate Google Sheets module, and it’s to fix this.</p>

<p>Sad fact #3: Google sheets must be publicly viewable to work (again, right now)</p>

<p>As the module exists right now, there’s no authentication involved, so any migrated content must be publicly viewable. <a href="https://developers.google.com/google-apps/spreadsheets/authorize">Google authorization is possible with Oauth2</a>, but that is not currently implemented.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Thanks for following along! I hope you found this series helpful. And don’t forget to visit the <a href="https://www.drupal.org/project/migrate_google_sheets">Migrate Google Sheets</a> <a href="https://www.drupal.org/project/issues/migrate_google_sheets?categories=All">issue queue</a> if you find any bugs, have an idea for a feature, or need help!</p>
]]>
  </description>
  <pubDate>Mon, 16 Jan 2017 09:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2017/01/using-google-docs-and-migrate-to-populate-your-drupal-site-part-2/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2017/01/using-google-docs-and-migrate-to-populate-your-drupal-site-part-2/</guid>
</item>

    
      <item>
  <title>Up and Running with Drupal 8</title>
  <description>
    <![CDATA[<p>It’s November 2015, and Drupal.org is rolling out <a href="https://www.drupal.org/project/drupal">Drupal 8 release candidates</a>! Heck, Drupal 8 is coming out <em>this week</em>. For many devs, that means we need to figure out how to install, sync, and set up a site theme. Here at ThinkShout, learning is part of the job - we have dedicated time every week to learn new things and share them, be it in a blog post, at our weekly engineering meetings, or at our weekly team lunch.</p>

<p>For the last few months, we’ve made learning Drupal 8 our singular focus. The ‘D8 Bookclub’ has been getting assignments, doing their homework, and sharing their findings internally. We’ve now spent enough time with Drupal 8 that we can share what we’ve learned, the little gotchas and hard-to-find code snippets, as well as the general change in philosophy that has occurred in the shift from D7 to D8.</p>

<p>We generally agree that one of the things keeping people from digging into Drupal 8 is the difficulty of getting it installed and running in a deployable way, which is a must-have if you want to have a team working on a project. This article will walk you through Drupal 8 installation and configuration sync. The follow-up article (<em>Up and Theming with Drupal 8</em>) will cover theme setup and configuration, so that you can finally get going with theming in D8.</p>

<h2 id="installing-drupal-8">Installing Drupal 8</h2>

<p>The <a href="https://github.com/drupal-composer/drupal-project">composer install</a> method is being widely proposed as the replacement for <code class="highlighter-rouge">drush make</code>. The <code class="highlighter-rouge">composer.json</code> file is to <code class="highlighter-rouge">composer install</code> what a <a href="http://www.drush.org/en/master/make/">drush make</a> file is to <code class="highlighter-rouge">drush make</code>. The drupal-composer github repo has a composer template called <a href="https://github.com/drupal-composer/drupal-project">drupal-project</a> that will get us up and running with just the basics necessary to have a working site.</p>

<p>For command-line manipulation, you’ll need to be using <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a>. Like most dev shops, we use version control (<a href="http://xkcd.com/1597/">Git</a>) as well as a <code class="highlighter-rouge">local-&gt;dev-&gt;test-&gt;live</code> server setup. There are a few gotchas here:</p>

<p>The composer template mentioned above works great for a basic D8 install, but if you want it customized (additional packages, post-install commands, etc), you will have to:</p>

<ul>
  <li><a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile</li>
  <li>unzip the files</li>
  <li>update the <code class="highlighter-rouge">composer.json</code> and <code class="highlighter-rouge">scripts/composer/post-install.sh</code> files</li>
  <li>run <code class="highlighter-rouge">composer install</code> locally.</li>
</ul>

<p>This is the method we’ll be using for the rest of this post.</p>

<p>First, <a href="https://getcomposer.org/doc/00-intro.md">install composer</a>. We’re using OSX with <a href="http://brew.sh/">Homebrew</a>, so this is fairly simple - <code class="highlighter-rouge">brew install composer</code>. Note: after implementing this, add this to your <code class="highlighter-rouge">.bashrc</code> (or similar):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.composer/vendor/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>Next, ensure you have <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a> installed. We prefer the <a href="http://docs.drush.org/en/master/install-alternative/#install-a-global-drush-via-composer">Composer global install</a> approach to make updating Drush as simple as running <code class="highlighter-rouge">composer global update</code>.</p>

<p>Next, <a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile, and unzip it into an appropriate local directory (We use a <code class="highlighter-rouge">~/Sites/</code> directory to hold all of our projects).</p>

<p>Note: the Drupal Composer project updates regularly. If you run into any errors, re-download it. You could alternately create an <a href="https://www.drupal.org/node/2210443">installation profile</a> in the <code class="highlighter-rouge">web/profiles</code> folder, but that seems to be a tad under-documented and still not fully baked.</p>

<p>Now that we have a default site scaffold in place, we can get back to the post-install method. If you want to run the site installer after composer installs Drupal, in the <code class="highlighter-rouge">post-install.sh</code> file, you would add:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>web<span class="p">;</span>drush si <span class="nt">--site-name</span><span class="o">=</span><span class="s2">"SITENAME"</span> <span class="nt">--db-url</span><span class="o">=</span>mysql://root:PASSWORD@HOSTNAME/DBNAME <span class="nt">-y</span><span class="p">;</span><span class="nb">cd</span> ../
</code></pre></div></div>

<p>For the above, replace <code class="highlighter-rouge">SITENAME, PASSWORD, HOSTNAME</code>(we use localhost) and <code class="highlighter-rouge">DBNAME</code>.</p>

<p>One of the D8 Bookclub challenges was completing the installation without any warnings appearing on the Status Reports page at <code class="highlighter-rouge">/admin/reports/status</code>. We also want to specify the configuration sync directory, so that it’s not site-unique.</p>

<p>The trick here is to use a series of permission and site config tweaks. After the site install code above, add the following to your <code class="highlighter-rouge">post-install.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>777 web/sites/default/s<span class="k">*</span><span class="p">;</span>

<span class="c">#Prepare the custom sync directory, which will sit outside of the web root</span>

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> configs <span class="o">]</span>
<span class="k">then </span><span class="nb">mkdir</span> <span class="nt">-m777</span> configs
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">config_directories['sync'] = '../configs';"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">settings['trusted_host_patterns'] = array('SITENAME</span><span class="se">\.</span><span class="s2">dev</span><span class="nv">$'</span><span class="s2">,);"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">chmod </span>444 web/sites/default/s<span class="k">*</span>

<span class="nb">chmod</span> <span class="nt">-R</span> 777 web/sites/default/files
</code></pre></div></div>

<p>This will make the <code class="highlighter-rouge">settings.php</code> file editable, create a sync directory below the web root (bonus security!), add the sync directory path, add the <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!DrupalKernel.php/function/DrupalKernel%3A%3AsetupTrustedHosts/8">trusted host pattern</a> (a new D8 requirement), secure the file, and make the <code class="highlighter-rouge">web/sites/default/files</code> folder globally writable.</p>

<p>Now you’re ready to run the installation! From the base directory, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer <span class="nb">install</span>
</code></pre></div></div>

<p>This will take a while, since it’s downloading Drupal and all the modules.
After initial installation, perform a full export and an immediate import/sync of your site configuration profile. This can be done two ways:</p>

<ol>
  <li>
    <p>Via the gui: <code class="highlighter-rouge">/admin/config/development/configuration/full/export</code></p>

    <p>Save this export file! Any subsequent sites will need this as a starting point so that entity mismatches don’t occur.</p>
  </li>
  <li>
    <p>Via Drush (run from the <code class="highlighter-rouge">/web</code> directory):</p>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-export
drush config-import <span class="nb">sync</span>
</code></pre></div></div>

<p>This will export and then sync all of your config files in the configuration directory we specified in the post-install script.</p>

<p>You would then check in this version of the site - a commit message such as ‘Base Site profile’ would be helpful. Here’s a quick set of command-line git repo creation commands, starting with an installation of hub, the <a href="https://hub.github.com/">command-line wrapper</a> for GitHub (this will allow you to use GitHub’s 2-factor authentication):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>hub
git init
hub create
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s1">'Base Site profile'</span>
git push <span class="nt">--set-upstream</span> origin master
</code></pre></div></div>

<p>After that, you can check out additional sites by creating a directory, cd into that directory, and running a git clone command inside it, such as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:USER/REPOSITORY.git <span class="nb">.</span>
</code></pre></div></div>

<p>Now you can run `composer install to build your clone.</p>

<p>Optional: edit the <code class="highlighter-rouge">post-install.sh prior to running </code>composer install` if you’d like your clone to have a different hostname, db, etc.</p>

<h2 id="syncing-sites">Syncing Sites##</h2>

<p>Site configurations are only exportable to sites that have the same UUID and have synced using the shared base configuration profile. To find your site’s UUID, cd to the web folder of the base site, then run <code class="highlighter-rouge">drush config-get system.site</code>. After that, any new site can be synced using these steps immediately after a fresh install (either via download or Git clone):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-edit system.site <span class="o">(</span>Update the UUID to match the base site<span class="o">)</span>
</code></pre></div></div>

<p>If you manually saved the files, upload the base site config profile, but do not sync it</p>

<p>-OR-</p>

<p>If you cloned the repo, the files should be in place. If the git repo has moved beyond the base install, check out the repo at the ‘Base Site Profile’ stage mentioned above using <code class="highlighter-rouge">git reset --hard $SHA1</code> (where $SHA1 is the SHA of the Base Site Profile)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-import <span class="nt">--partial</span>
</code></pre></div></div>

<p>Important Note: Every new instance MUST start with the same base configuration profile, otherwise you may have entity mismatch issues, even with the partial import. After the initial sync is complete, you can pull in config files via Git and sync will work as expected, even over multiple configuration changes.</p>

<h2 id="creating-a-theme">Creating a Theme##</h2>

<p>This will be covered in our next post: “Up and Theming with Drupal 8.”</p>

<h2 id="disclaimer">Disclaimer##</h2>

<p>The post was written at the end of 2015 while Drupal 8 was still in a Release Candidate stage. While some effort will be made to keep the post up-to-date, if it’s after 2016, you should probably be adding the year you are currently in to your Google search, or better yet, check the docs on <a href="https://www.drupal.org/drupal-8.0">Drupal.org</a>.</p>
]]>
  </description>
  <pubDate>Wed, 18 Nov 2015 08:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</guid>
</item>

    

  </channel>
</rss>
