<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/drupal-8/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>Upgrading MailChimp eCommerce and an Introduction to Drupal 8's Event System</title>
  <description>
    <![CDATA[<p>If you’ve ever built a Drupal 7 module, then you’ll be familiar with hooks: functions that allow modules to react to things happening in other modules. The hook system is functionally fine but, with so many hooks to implement, .module files often become bloated and difficult to manage.</p>

<p>Drupal 8’s event system does a lot to reduce the clutter of hooks. Now, instead of using a hook, you can create an event subscriber that will execute your code every time a module triggers an event. This is similar to the hook system only in the effect; the execution is very different.</p>

<p>Porting our popular MailChimp eCommerce module to Drupal 8 gave me the perfect opportunity learn about the event system. I use the word “opportunity” to disguise the fact that I was forced to learn how events work because it was impossible to port the module without doing so.</p>

<p>The MailChimp eCommerce module depends on the Commerce module, naturally, and in Drupal 8, the Commerce module makes heavy use of events.</p>

<p>First, let’s look at an event. I’m using an example ripped straight from Commerce.</p>

<p>The Commerce submodule, Commerce Cart, contains a class named <code class="highlighter-rouge">CartEntityAddEvent</code>. You can <a href="http://cgit.drupalcode.org/commerce/tree/modules/cart/src/Event/CartEntityAddEvent.php?h=8.x-2.x">find it here</a>.</p>

<p>The class itself is simple; it’s designed to store a few values - the cart, the item being added to the cart, and the quantity of that item. The class also has a few getter functions for convenience.</p>

<p>Most importantly, this class represents an event that’s triggered every time a user adds an item to their shopping cart. This is done using just two lines of code:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CartEntityAddEvent</span><span class="p">(</span><span class="nv">$cart</span><span class="p">,</span> <span class="nv">$purchased_entity</span><span class="p">,</span> <span class="nv">$quantity</span><span class="p">,</span> <span class="nv">$saved_order_item</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">eventDispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nx">CartEvents</span><span class="o">::</span><span class="na">CART_ENTITY_ADD</span><span class="p">,</span> <span class="nv">$event</span><span class="p">);</span>
</code></pre></div></div>

<p>The event class is created with all the relevant values, then “dispatched” to any event subscribers configured to pay attention to it. When dispatched, the event is identified by a constant - <code class="highlighter-rouge">CartEvents::CART_ENTITY_ADD</code>. This constant is used by event subscribers, which we’ll take a look at now.</p>

<p>This is a cut-down version of an event subscriber used by our <a href="https://www.drupal.org/project/mailchimp_ecommerce">MailChimp eCommerce module</a>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sd">/**
 * Event Subscriber for Commerce Carts.
 */</span>
<span class="k">class</span> <span class="nc">CartEventSubscriber</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span> <span class="p">{</span>

  <span class="sd">/**
   * The Cart Handler.
   *
   * @var \Drupal\mailchimp_ecommerce\CartHandler
   */</span>
  <span class="k">private</span> <span class="nv">$cart_handler</span><span class="p">;</span>

  <span class="sd">/**
   * The Order Handler.
   *
   * @var \Drupal\mailchimp_ecommerce\OrderHandler
   */</span>
  <span class="k">private</span> <span class="nv">$order_handler</span><span class="p">;</span>

  <span class="sd">/**
   * CartEventSubscriber constructor.
   *
   * @param \Drupal\mailchimp_ecommerce\CartHandler $cart_handler
   *   The Cart Handler.
   * @param \Drupal\mailchimp_ecommerce\OrderHandler $order_handler
   *   The Order Handler.
   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">CartHandler</span> <span class="nv">$cart_handler</span><span class="p">,</span> <span class="nx">OrderHandler</span> <span class="nv">$order_handler</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cart_handler</span> <span class="o">=</span> <span class="nv">$cart_handler</span><span class="p">;</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">order_handler</span> <span class="o">=</span> <span class="nv">$order_handler</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="sd">/**
   * Respond to event fired after adding a cart item.
   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">cartAdd</span><span class="p">(</span><span class="nx">CartEntityAddEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="sd">/** @var \Drupal\commerce_order\Entity\Order $order */</span>
    <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCart</span><span class="p">();</span>

    <span class="sd">/** @var \Drupal\commerce_order\Entity\OrderItem $order_item */</span>
    <span class="nv">$order_item</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrderItem</span><span class="p">();</span>

    <span class="nv">$product</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">order_handler</span><span class="o">-&gt;</span><span class="na">buildProduct</span><span class="p">(</span><span class="nv">$order_item</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cart_handler</span><span class="o">-&gt;</span><span class="na">addCartLine</span><span class="p">(</span><span class="nv">$order</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">(),</span> <span class="nv">$order_item</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">(),</span> <span class="nv">$product</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="sd">/**
   * {@inheritdoc}
   */</span>
  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$events</span><span class="p">[</span><span class="nx">CartEvents</span><span class="o">::</span><span class="na">CART_ENTITY_ADD</span><span class="p">][]</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'cartAdd'</span><span class="p">];</span>

    <span class="k">return</span> <span class="nv">$events</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://github.com/thinkshout/mailchimp_ecommerce/blob/8.x-1.x/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/CartEventSubscriber.php">Here’s the complete version, if you’re interested</a>.</p>

<p>So what does it do, exactly?</p>

<p>Let’s start with the <code class="highlighter-rouge">getSubscribedEvents()</code> function. This is where we define which events we want to subscribe to, and assign each event a processing function. Here we are subscribing to just one event, the “cart entity add” event, and assigning the <code class="highlighter-rouge">cartAdd()</code> function as a processor.</p>

<p>Note that the <code class="highlighter-rouge">cartAdd()</code> function takes one argument, an instance of the <code class="highlighter-rouge">CartEntityAddEvent</code> class. That’s the same class we looked at earlier - the event class defined in the Commerce Cart module. This is where our module reacts to that event being triggered.</p>

<p>The <code class="highlighter-rouge">cartAdd()</code> function itself extracts the order and item information from the event and uses an instance of the <code class="highlighter-rouge">CartHandler</code> class, provided by the MailChimp eCommerce module, to send updated cart information to MailChimp’s API.</p>

<p>One final thing:</p>

<p>Event subscribers won’t work unless they are defined as a service. Services are defined in a module’s *.services.yml file, which you can <a href="https://www.drupal.org/docs/8/api/services-and-dependency-injection/structure-of-a-service-file">learn more about here</a>.</p>

<p>The service definition for the <code class="highlighter-rouge">CartEventSubscriber</code> looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">mailchimp_ecommerce_commerce.cart_event_subscriber</span><span class="pi">:</span>
    <span class="na">class</span><span class="pi">:</span> <span class="s1">'</span><span class="s">\Drupal\mailchimp_ecommerce_commerce\EventSubscriber\CartEventSubscriber'</span>
    <span class="na">arguments</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">@mailchimp_ecommerce.cart_handler'</span><span class="pi">,</span> <span class="s1">'</span><span class="s">@mailchimp_ecommerce.order_handler'</span><span class="pi">]</span>
    <span class="na">tags</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="pi">{</span> <span class="nv">name</span><span class="pi">:</span> <span class="nv">event_subscriber</span> <span class="pi">}</span>
</code></pre></div></div>

<p>We identify the class using its namespace, inject the “cart_handler” and “order_handler” services, then, finally, tag the service as an “event_subscriber”. <a href="https://github.com/thinkshout/mailchimp_ecommerce/blob/8.x-1.x/modules/mailchimp_ecommerce_commerce/mailchimp_ecommerce_commerce.services.yml">Check out the full file here</a>. Just for completeness, the two injected services are defined in <a href="https://github.com/thinkshout/mailchimp_ecommerce/blob/8.x-1.x/mailchimp_ecommerce.services.yml">here</a>.</p>

<p>I’m a big fan of how Drupal 8 has shifted towards a more object-oriented way of doing things. It’s more organized, promotes consistency between modules, and, best of all, finally signals an end to massive .module files.</p>

]]>
  </description>
  <pubDate>Thu, 06 Jul 2017 12:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2017/07/upgrading-mailchimp-ecommerce-and-and-introduction-to-drupal-8s-event-system/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2017/07/upgrading-mailchimp-ecommerce-and-and-introduction-to-drupal-8s-event-system/</guid>
</item>

    
      <item>
  <title>Demystifying Rendered Content in Drupal 8 Twig Files</title>
  <description>
    <![CDATA[<p>Have you ever stared at your computer screen with a deer-in-headlights expression on your face thinking “I have no idea where to even start with this…”? That was me about a month ago when I was asked to help theme a Drupal 8 project for the very first time. Getting started theming in Drupal 8, still being in a fairly new iteration with a programming style differing from Drupal 7, was both an exciting and daunting task. It was exciting in the sense that I heard good things from those who’ve already started theming in D8, and daunting because there’d been a lot of changes between D7 and D8.</p>

<p>One of the differences between Drupal 7 and 8 is template files; PHPTemplate (.tpl.php) files were replaced with Twig (.html.twig) files. <a href="http://twig.sensiolabs.org/">Twig</a> is a robust and elegant template engine for PHP. Once I started working with Twig, I instantly loved it. I found it to be lightweight, fairly quick to pick up, and very readable. Not only that, but I had what felt like ultimate control to the markup, including wrapping elements and rendering exactly the ouput I needed. Often with Drupal 7, wrapping elements in a <code class="highlighter-rouge">&lt;div&gt;</code> requires assistance from a back-end developer.</p>

<p>With this newfound enthusiasm, I set out to write the best twig code ever! In order to find the output I needed, I used the Twig function <a href="http://twig.sensiolabs.org/doc/functions/dump.html">dump()</a>. This function “dumps” a variable’s information right on the screen. This proved highly useful until I realized I needed to dig deeper into the arrays and objects contained within the variable. There was only so much guess work I could do here before getting epically frustrated, seemingly wasting valuable time looking for an image file’s path.</p>

<p>Though there are a handful of debugging methods to choose from, I had the best luck getting what I needed by using <a href="https://dev.acquia.com/blog/debugging-drupal-8/debugging-twig-templates-in-drupal-8-with-phpstorm-and-xdebug/25/08/2016/16586">PHPStorm to debug Twig files</a>. That’s right, front-end friends, PHPStorm isn’t just for back-end PHP-coding devs. It can be a great tool for front-end programmers as well!</p>

<p>After following the steps listed in <a href="https://dev.acquia.com/blog/debugging-drupal-8/debugging-twig-templates-in-drupal-8-with-phpstorm-and-xdebug/25/08/2016/16586">Lubomir Culen’s post about debugging Twig templates</a>, I began to look for templates in the following path <code class="highlighter-rouge">sites/default/files/php</code>. From my understanding, opening a template folder gains access to the current template version the project is using, hence the long hash.</p>

<p><img src="/assets/images/blog/content-rendering-1.png" alt="Content rendering 1" /></p>

<p>If a change is made to the template, an additional hash file is created and a new breakpoint will need to be set. If at any point the hash template files get overwhelming, clearing the cache (running <code class="highlighter-rouge">drush cr all</code>) will reset the PHP folder and the template files, reducing the hash files to one per template folder.</p>

<p>First off, I needed to acclimate myself to translating PHPStorm syntax into Twig. For example, copying a variable name in PHPStorm produces a syntax like this: <code class="highlighter-rouge">$context[‘page’][‘#title’]-&gt;arguments[‘@name’]</code>. That gets translated into the twig file like so: <code class="highlighter-rouge">page[‘#title’].arguments[‘@name’]</code>. Here’s what my PHPStorm screen looked like while working on this solution:</p>

<p><img src="/assets/images/blog/content-rendering-2.png" alt="Content rendering 2" /></p>

<p>Some patterns and tricks I found helpful:</p>

<ul>
  <li>Ignoring <code class="highlighter-rouge">$context</code> and starting with the main content variable.</li>
  <li>Strip array syntax, i.e. <code class="highlighter-rouge">[‘page’]</code> = <code class="highlighter-rouge">page</code>.</li>
  <li>If arrays exist next to each other, separate them with periods. Ex. <code class="highlighter-rouge">[‘page’][‘content’]</code> = <code class="highlighter-rouge">page.content</code>.</li>
  <li>If an array has a #, @, or other symbol associated, keep its integrity. No period is needed here. Ex. <code class="highlighter-rouge">[‘page’][‘#title’]</code> = <code class="highlighter-rouge">page[‘#title’]</code>, and <code class="highlighter-rouge">arguments[‘@name’]</code> stays the same.</li>
  <li>If an arrow exists, treat the method (what comes after the -&gt;) in the same manner as arrays. Ex. <code class="highlighter-rouge">[‘#title’]-&gt;arguments</code> = <code class="highlighter-rouge">[‘#title’].arguments</code></li>
  <li>If you’re having trouble rendering the desired output, try adding <code class="highlighter-rouge">.value</code> to the end of the render code and see if that does the trick.</li>
  <li>Use <code class="highlighter-rouge">dump()</code> simultaneously with PHPStorm’s suggested variable path.</li>
  <li>Refer to the <a href="http://twig.sensiolabs.org/documentation">Twig documentation</a> for other handy built-in features.</li>
</ul>

<p>Up until the moment I got PHPStorm doing the heavy lifting, my team and I were relying soley on the <code class="highlighter-rouge">dump()</code> Twig function. We were halfway through the project when I discovered a value was no longer present. The disappearance was due to a template’s reliance on a value being rendered via an array placement, i.e. <code class="highlighter-rouge">content.tile.3['#markup']</code>, the ‘3’ referring to the 4th placement in the ‘tile’ array. To alleviate potential confusion, ‘tile’ happened to be the custom field group where the <code class="highlighter-rouge">field_to_render</code> existed, and the <code class="highlighter-rouge">field_to_render</code> was the 4th field in the list of fields. When a field was moved within the ‘tile’ field group, the code broke. Once I had access to the phpstorm debugger, I was able to see a better way to render this element, i.e. <code class="highlighter-rouge">content.field_to_render</code>. It suddenly dawned on me that our project needed some tidying, so I rolled up my sleeves and got to work.</p>

<p>These are the strategies I established during my clean-up process:</p>

<ul>
  <li>Create the shortest render code possible with the closest placement to the main content variable. This will be the most stable. My array placement example mentioned previously is a good example of this. The same value can be present and rendered in numerous ways.</li>
  <li>If rendering a field, use this pattern: <code class="highlighter-rouge">content.field_to_render</code>. This will render the field object, inheriting any backend logic that’s been applied to that field existing in the view_mode you are theming.</li>
  <li>If you prefer having just the markup or integer value, try adding a <code class="highlighter-rouge">.value</code> to the end. Examples: <code class="highlighter-rouge">content[‘#node’].nid.value</code> will provide just the node id, and <code class="highlighter-rouge">content.node_title</code> will render the title object whereas <code class="highlighter-rouge">content[‘#node’].title.value</code> will render the title as a string.</li>
  <li>The first element in an array might be the most stable. For example, we often use the media module which can add complexity to a media item’s data structure. In order use a node’s image as a background for a <code class="highlighter-rouge">&lt;div&gt;</code>, this is the best approach we found: <code class="highlighter-rouge">&lt;div class=”banner-image” style="background-image: url({{file_url(content.field_banner_image.0['#item'].entity.uri.value)}})"&gt;</code>.</li>
</ul>

<p>Any change can be tough to navigate, but it’s often well worth the effort. My experience theming in Drupal 8 thus far has been lovely, and fairly intuitive. I find it offers front-end developers more authority over the markup than its predecessor, and makes me excited for the future of theming in Drupal 8. If you were at all daunted by the thought of theming in Drupal 8, I hope this post helps you in your future twig debugging endeavors!</p>

<p><em>Note:</em> <a href="https://www.drupal.org/project/devel">Devel</a> and <a href="http://raveren.github.io/kint/">Kint</a> are a couple additional tools available for debugging Twig variables, and I mention those in case others find them useful. More information on how to set those tools up for debugging Twig files (and more!) can be found in this <a href="https://sqndr.github.io/d8-theming-guide/twig/twig-debug.html">Drupal 8 Theming Guide</a> and on Amber Matz’s <a href="https://drupalize.me/blog/201405/lets-debug-twig-drupal-8">Let’s Debug in Drupal 8!</a> post.</p>

<p>If you’re new to Drupal 8 theming, I would start with the resources Amber specifies in her “Editor’s notes”, and <a href="https://sqndr.github.io/d8-theming-guide/">sqndr’s D8 theming docs</a>. Debugging twig files is an intermediate topic.</p>

<p>If you have any personal experience with Drupal 8 theming, or insight you’d like to share, I’d love to hear about it in the comments section!</p>
]]>
  </description>
  <pubDate>Wed, 09 Nov 2016 09:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2016/11/demystifying-content-rendering-in-drupal-8-twig-files/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/11/demystifying-content-rendering-in-drupal-8-twig-files/</guid>
</item>

    
      <item>
  <title>Content Modeling in Drupal 8</title>
  <description>
    <![CDATA[<p><em>Originally published Sept. 25, 2016 on <a href="http://www.gregboggs.com/drupal-8-content-modeling/">GregBoggs.com.</a></em></p>

<p>In many modern frameworks, data modeling is done by building out database tables. In Drupal, we use a web-based interface to build our models. This interface makes building the database accessible for people with no database experience. However, this easy access can lead to overly complex content models because it’s so easy to build out advanced structures with a few hours of clicking. It’s surprising how often Drupal developers are expected to be content modeling experts. Rachel Lovinger wrote this great <a href="http://alistapart.com/article/content-modelling-a-master-skill">overview of content modeling</a> for the rest of us who aren’t experts yet.</p>

<h2 id="data-modeling-goal">Data Modeling Goal</h2>
<p>Our goal when modeling content in Drupal is to build out the structure that will become our editor interface and HTML output. We also need to create a model that supports the functionality needed in the website. While accomplishing this, we want to reduce the complexity of our models as much as possible.</p>

<h2 id="getting-started">Getting Started</h2>
<p>One of the first things to do when building a Drupal site is build content types. So, before you start a site build, start with either a content model or a detail page wireframe. This <a href="https://docs.google.com/spreadsheets/d/15htLLWLguhwiuTLg_nndQNpgWVdUMy6UaR_d1q-v6iw/edit#gid=0">spreadsheet from Palantir</a> will help you. The home page design may look amazing, but it’s unhelpful for building out content types. Get the detail pages before you start building.</p>

<h2 id="why-reduce-complexity">Why Reduce Complexity?</h2>
<p>The more content types you create, the more effort it will take to produce a site. Furthermore, the more types you have, the more time it will take to maintain the site in the future. If you have 15 content types and need to make a site-wide change, you need to edit 15 different pages.</p>

<p>The more pages you need to edit, the more mistakes you will make in choosing labels, settings, and formatters. Lastly, content can’t easily be copied from one type to another, which makes moving content around your site harder when there are many content types. So, the first thing you’ll want to do with your content model is collapse your types into as few types as feasible. How many is that?</p>

<h2 id="5-content-types-is-enough">5 Content Types is Enough</h2>
<p>Drupal has many built in entities like files, taxonomy, users, nodes, comments, and config. So, the vast majority of sites don’t need any more than 5 content types. Instead of adding a new content type for every design, look for ways to reuse existing types by adding fields and applying layouts to those fields.</p>

<h2 id="break-up-the-edit-form">Break Up the Edit Form</h2>
<p>Drupal 8 allows you to have different form displays for a single content type. With either <a href="https://www.drupal.org/project/form_mode_control">Form Mode Control</a> or <a href="https://www.drupal.org/project/form_mode_manager">Form Mode Manager</a>, you can create different edit experiences for the same content type without overloading the admin interface.</p>

<p>By reducing the complexity of the content model, we decrease maintenance cost, improve the consistency of the website, and simplify the editing experience. Now that you’ve got some content modeling basics, look for opportunities to reduce and reuse content types in your Drupal projects. Content editors will thank you.</p>
]]>
  </description>
  <pubDate>Fri, 14 Oct 2016 11:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/10/content-modeling-in-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/10/content-modeling-in-drupal-8/</guid>
</item>

    
      <item>
  <title>See No Email, Hear No Email, Speak No Email</title>
  <description>
    <![CDATA[<p>Listen up, Drupal savvy MailChimp fans. We’ve got some news for you: MailChimp recently rolled out a newer and more robust version of their API - <a href="http://developer.mailchimp.com/documentation/mailchimp/">MailChimp API version 3.0</a>! Now I can probably guess what you’re thinking so I’ll just come out and say it: this means <a href="https://apidocs.mailchimp.com/api/2.0/">MailChimp’s API version 2.0</a> is about to become deprecated, and we’re not monkeying around.</p>

<p>For those of you using the 8.x and 7.x-4.x branches of the <a href="https://www.drupal.org/project/mailchimp">MailChimp module</a>, feel free to sit back and relax - you are already using MailChimp’s API v3.0. Those of of you still using the 7.x-2.x and 7.x-3.x branches, get ready: API v2.0 will be phased out on December 31st, so we encourage you all to upgrade.</p>

<p>Don’t be a furious George - we’ve got you covered. Our documentation up on <a href="https://www.drupal.org/project/mailchimp">Drupal.org</a> has been updated, and we’ve provided information that will help make your upgrade experience as seamless as possible. We’ve even included a shiny new <a href="https://www.drupal.org/node/2793241">FAQ page</a> this go around. For additional support, feel free to post questions on <a href="http://drupal.stackexchange.com/questions/tagged/mailchimp">Drupal Answers</a>.</p>

<p>Alright, let’s get down to monkey business. Those of you who upgrade are about to have a module that is regularly maintained, has an improved infrastructure (see the <a href="http://cgit.drupalcode.org/mailchimp/tree/README.txt">README.txt</a> on the 7.x-4.x branch for more info), and can be integrated with the new <a href="https://www.drupal.org/project/mailchimp_ecommerce">MailChimp E-Commerce module</a> (more on that in a future blogpost) - now, that’s something to go bananas for!</p>
]]>
  </description>
  <pubDate>Thu, 01 Sep 2016 09:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/09/see-no-email-mailchimp/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/09/see-no-email-mailchimp/</guid>
</item>

    
      <item>
  <title>Drupal 8 Routing Tricks for Better Admin URLs</title>
  <description>
    <![CDATA[<p>We recently launched a new case tracker for foster ed youth designed to improve their educational outcomes in partnership with <a href="http://youthlaw.org/">The National Center for Youth Law</a> (NCYL). The web application replaces their existing platform, Goal Book, which lacked the flexibility they needed to meet their requirements. A web application differs from a website in that a website primarily provides <em>content</em> where a web application primarily provides <em>tools</em>.</p>

<p>The project presented us with an opportunity to do extensive custom development with our favorite new platform, Drupal 8. D8’s many developer experience improvements, including standardized object-oriented development methods, allowed us to meet NCYL’s requirements efficiently and with a level of quality that would have been more difficult on Drupal 7. In addition, we were able to accelerate the release of <a href="https://drupal.org/project/redhen">RedHen CRM</a> on <a href="https://www.drupal.org/project/redhen/releases/8.x-1.0-alpha1">Drupal 8</a>, which lives at the heart of the application managing all of the contacts, organizations, and relationships.</p>

<p>To enhance the utility of the application, we made an early decision to customize every URL a user would interact with. As most of the functionality would revolve around nodes, we wanted to make sure we avoided URLs like <code class="highlighter-rouge">/node/256/edit</code> that don’t give the user any indication of which part of the application they’re using.</p>

<h2 id="implementation">Implementation</h2>

<p>If you wanted to customize URLs in Drupal 7, you could use the <a href="https://www.drupal.org/project/pathauto">Pathauto</a> module. You can still do that in Drupal 8, but D8’s routing system can be coaxed into doing something similar. It works on admin pages, too, which was perfect for NCYL’s needs.</p>

<h2 id="overriding-existing-node-paths">Overriding Existing Node Paths</h2>

<p>As an example, let’s say you have a node type specifically for storing information about schools: a School Node. The standard admin path for adding a School Node would be something like this:</p>

<p><code class="highlighter-rouge">/node/add/school</code></p>

<p>But, add a custom module with route configuration and you can have this:</p>

<p><code class="highlighter-rouge">/school/add</code></p>

<p>For simplicity, we’ll call our module <strong>school.module</strong>. The directory structure looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modules/
  school/
    school.module
    school.routing.yml
</code></pre></div></div>

<p>The route configuration sits inside <strong>school.routing.yml</strong> and looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">school.add</span><span class="pi">:</span>
  <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/school/add'</span>
  <span class="na">defaults</span><span class="pi">:</span>
    <span class="na">_controller</span><span class="pi">:</span> <span class="s1">'</span><span class="s">\Drupal\node\Controller\NodeController::add'</span>
    <span class="na">_title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Add</span><span class="nv"> </span><span class="s">School'</span>
    <span class="na">node_type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">school'</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="na">_node_add_access</span><span class="pi">:</span> <span class="s1">'</span><span class="s">node:school'</span>
</code></pre></div></div>

<p>Line by line:</p>

<p><code class="highlighter-rouge">school.add:</code></p>

<p>This is the name of the route. Route names should be unique and usually start with the name of your module.</p>

<p><code class="highlighter-rouge">path: '/school/add'</code></p>

<p>The path the route points to. This is the part that comes after your site’s base URL.</p>

<p><code class="highlighter-rouge">_controller: '\Drupal\node\Controller\NodeController::add'</code></p>

<p>This tells the route to use the NodeController, provided by the Node module. No need for a custom controller here.</p>

<p><code class="highlighter-rouge">_title: 'Add School'</code></p>

<p>This sets the page title of the node add form.</p>

<p><code class="highlighter-rouge">_node_add_access: 'node:school'</code></p>

<p>This is an access handler that ensures the user has permission to add a node of type “school.”</p>

<p>Providing a custom path to edit School Nodes is even easier:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">school.edit</span><span class="pi">:</span>
  <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/school/{node}/edit'</span>
  <span class="na">defaults</span><span class="pi">:</span>
    <span class="na">_entity_form</span><span class="pi">:</span> <span class="s1">'</span><span class="s">node.edit'</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="na">node</span><span class="pi">:</span> <span class="s">\d+</span>
    <span class="na">_entity_access</span><span class="pi">:</span> <span class="s1">'</span><span class="s">node.update'</span>
</code></pre></div></div>

<p>We no longer need to tell the route which controller to use or what type of node we’re using. Drupal 8’s Entity API figures it out using the node ID passed in the URL.</p>

<p>Line by line again:</p>

<p><code class="highlighter-rouge">path: '/school/{node}/edit'</code></p>

<p>The path now contains a placeholder, {node}, which represents the node ID in the URL.</p>

<p><code class="highlighter-rouge">_entity_form: 'node.edit'</code></p>

<p>The form we want to use to edit the node.</p>

<p><code class="highlighter-rouge">node: \d+</code></p>

<p>Some validation to ensure the URL contains the right data type for a node ID. By specifying the regular expression pattern <code class="highlighter-rouge">\d+</code>, we are telling Drupal to only use this route when <code class="highlighter-rouge">{node}</code> is one or more digits. The route will match a URL like /school/32/edit, but will not match /school/lincoln-high/edit.</p>

<p><code class="highlighter-rouge">_entity_access: 'node.update'</code></p>

<p>An access handler, ensuring the user has permission to update this node. No need to specify the node type, as we did when adding a node.</p>

<p>Finally, a route for viewing the node:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">school.view</span><span class="pi">:</span>
  <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/school/{node}'</span>
  <span class="na">defaults</span><span class="pi">:</span>
    <span class="na">_controller</span><span class="pi">:</span> <span class="s1">'</span><span class="s">\Drupal\node\Controller\NodeViewController::view'</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="na">node</span><span class="pi">:</span> <span class="s">\d+</span>
    <span class="na">_entity_access</span><span class="pi">:</span> <span class="s1">'</span><span class="s">node.view'</span>
</code></pre></div></div>

<p>Very similar to the node edit route, just with a different path and controller.</p>

<p>For a more thorough explanation of routes and route options not covered here, check out the <a href="https://www.drupal.org/node/2092643">official docs</a>.</p>

<h2 id="custom-controllers">Custom Controllers</h2>

<p>What if you want to provide a custom controller for adding a node and still take advantage of Drupal’s permissions system? Routes can do that, too.</p>

<p>Let’s introduce a Teacher Node and an accompanying module.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modules/
  school/
  teacher/
    src/
      Controller/
        TeacherController.php
    teacher.module
    teacher.routing.yml
</code></pre></div></div>

<p><strong>teacher.routing.yml</strong> looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">teacher.add</span><span class="pi">:</span>
  <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/teacher/add'</span>
  <span class="na">defaults</span><span class="pi">:</span>
    <span class="na">_controller</span><span class="pi">:</span> <span class="s1">'</span><span class="s">\Drupal\teacher\Controller\TeacherController::addTeacher'</span>
    <span class="na">_title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Add</span><span class="nv"> </span><span class="s">Teacher'</span>
    <span class="na">node_type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">teacher'</span>
  <span class="na">requirements</span><span class="pi">:</span>
    <span class="na">_node_add_access</span><span class="pi">:</span> <span class="s1">'</span><span class="s">node:teacher'</span>
</code></pre></div></div>

<p>Very similar to the route we used to add School Nodes, but with a custom controller.</p>

<p><strong>TeacherController.php</strong> looks like this:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">Drupal\teacher\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Drupal\node\NodeTypeInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TeacherController</span> <span class="k">extends</span> <span class="nx">ControllerBase</span> <span class="p">{</span>

  <span class="k">public</span> <span class="k">function</span> <span class="nf">addTeacher</span><span class="p">(</span><span class="nx">NodeTypeInterface</span> <span class="nv">$node_type</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <strong>addTeacher</strong> function is where you would add your custom code for adding Teacher Nodes.</p>

<p>That’s how you can use core Drupal 8 functionality to make your Drupal admin pages a little more user friendly.</p>
]]>
  </description>
  <pubDate>Wed, 20 Jul 2016 10:30:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/07/drupal-8-routing-tricks-for-better-admin-urls/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/07/drupal-8-routing-tricks-for-better-admin-urls/</guid>
</item>

    
      <item>
  <title>The Hidden Power of Documentation</title>
  <description>
    <![CDATA[<p>Anyone who works on team-based projects knows how handy good project documentation is, and how frustrating it can be when that documentation is out of date, incomplete, or just not there. But there are other benefits to good documentation aside from convenience, and a solid system for writing and maintaining documentation is the key.</p>

<h2 id="defining-documentation">Defining Documentation</h2>

<p>Before we begin, we should be clear about what we mean when we say ‘Project Documentation’ (Docs for short). We’re referring to the information for team members (developers, designers, project managers, and engineers) who join a project at some point after initial development has begun, or even long after a project is complete, such as a maintenance team. This is different than User/Tech docs (how things work on a site), and Code docs (Comments, README files, etc.).</p>

<p>Good docs allow these team members to get up to speed on a project with a minimum of questions for existing or previous team members. In an ideal world, docs alone would suffice in getting someone set up and working on new features, bugfixes, or other project tasks.</p>

<h2 id="additional-benefits">Additional Benefits</h2>

<p>The convenience of good docs is apparent to anyone who joins a project after it has begun, but consider some of the other benefits:</p>

<ul>
  <li>Junior developers will be able to reference docs, instilling confidence.</li>
  <li>A team member leaving your company will not cause as much of a ‘knowledge drain’.</li>
  <li><em>Consistent</em> docs allow any team member to quickly jump in and out of projects as needed, providing project managers with additional flexibility in resource allocation.</li>
  <li>Long-dormant projects can be resurrected quickly, even if none of the original team members are available.</li>
  <li>Figuring out where a project’s code is, how to install it locally, how to make/commit changes to production, and tracking down the original wireframes, designs, and planning docs can take days if the original team members are not available. Good docs can cut this time to under an hour, or even minutes in some cases.</li>
  <li>Docs that accompany open-source projects are especially useful in saving the end-user AND the maintainer’s time.</li>
</ul>

<h2 id="location-location-location">Location, Location, Location</h2>

<p>Having your docs in one place, or in the same place on every project is the first step in making them easy to find - after all, what good are the docs if nobody can find them? ThinkShout uses GitHub for all of its projects, so we take advantage of the fact that every project on GitHub has a free Wiki. A link in the README.md to the wiki means everyone can find the docs in seconds.</p>

<h2 id="a-solid-foundation">A Solid Foundation</h2>

<p>The keys to good docs are <em>consistency</em>, <em>accuracy</em>, and <em>completeness</em>:</p>

<h3 id="consistency">Consistency</h3>

<p>For our Wiki, we have a template we use for every project’s docs, so we don’t have to search for the information among 40 different documentation styles. Your project’s needs may differ, but this should be a good starting point (this is in Markdown):</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Current Status</span>

(Site Type / Status. Drupal, WordPress, under development, maintenance, etc...)

<span class="gu">## Site Build Info</span>
<span class="p">
*</span> <span class="p">[</span><span class="nv">Wireframes</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Budget</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Implementation overview</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Migration Spreadsheet</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Style Guide</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>

<span class="gu">## Build Team</span>
<span class="p">
*</span> Name (Team Lead)
<span class="p">*</span> Name (Back-end)
<span class="p">*</span> Name (Front-end)
<span class="p">*</span> Name (PM)
<span class="p">*</span> Name (Design/UX)

<span class="gu">## Hosting</span>
<span class="p">
*</span> <span class="p">[</span><span class="nv">Dev</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Test</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>
<span class="p">*</span> <span class="p">[</span><span class="nv">Live</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>

<span class="gu">## Issue Tracking</span>

<span class="p">[</span><span class="nv">Redbooth Tasks</span><span class="p">](</span><span class="sx">URL</span><span class="p">)</span>

<span class="gu">## Deploying Code  </span>
Note: it is a good practice to run backups before deploying.<span class="sb">

    `cd ~/projects/PROJECTAME;git pull;./scripts/deploy.sh`  

</span><span class="gu">## Installation Notes</span>

Clone into <span class="sb">`projects`</span> folder, install to <span class="sb">`~/Sites/`</span>:<span class="sb">

    cd ~/projects
    git clone git@github.com:thinkshout/PROJECTNAME.git
    cd PROJECTNAME
    composer update
    ./scripts/build.sh ~/Sites/PROJECTNAME root root PROJECTNAME

</span>Download db and files from <span class="p">[</span><span class="nv">production</span><span class="p">](</span><span class="sx">production</span> backup URL)

Install the db by opening Sequel Pro, deleting the PROJECTNAME db,  
adding a new PROJECTNAME db, and importing the live db, then truncating  
all of the cache_<span class="err">*</span> tables. 

Install the files by unzipping the file download and copying them  
to <span class="sb">`~/Sites/PROJECTNAME/sites/default/files`</span>, then run:  <span class="sb">

    chmod -R 777 ~/Sites/PROJECTNAME/sites/default/files
    drush cc all
    drush fra -y

</span>Log in: drush uli

Disable cache and JS/CSS file aggregation   
at http://PROJECTNAME.dev/admin/config/development/performance<span class="sb">


</span><span class="gu">## Front-end Setup  </span>
Theme directory is at:  
<span class="sb">`~/Sites/PROJECTNAME/profiles/PROJECTNAME/themes/custom/PROJECTNAME`</span>

To get Sass running, <span class="sb">`cd`</span> to that directory and run <span class="sb">`bundle`</span>  
Thereafter, you only need to run <span class="sb">`rake serve`</span> from the theme directory.

</code></pre></div></div>

<h3 id="accuracy">Accuracy</h3>

<p>The nice thing about having your docs in a wiki is that everyone in your organization can edit them if they discover they are out of date. When a new team member is added to a project, encourage them to work from the docs and see how far they can get without asking for clarification or dealing with an unexpected error. And make sure they update the docs to reflect their experience - the only time docs are ‘done’ is when <em>anyone</em> can use them reliably <em>every</em> time. If you have to ask what something means, it’s likely that the next person will need to know that too - so update the docs!</p>

<h3 id="completeness">Completeness</h3>

<p>Every project has its quirks and exceptions to the standard procedures - usually for good reason. Good docs will not only note exceptions to standard procedures, but also explain why. In addition, sometimes a ‘Phase 2’ project will require additional information. Make note of these major updates with details such as planning info, principals, dates, and an overview of what was accomplished.</p>

<p>Sometimes a developer will run across coding environment issues that hold them up - this is quite common for the complex front-end setups needed to compile SASS into CSS. Front-end developers sometimes take these setups for granted, but documenting that install process can mean that your back-end developer can handle small CSS changes without assistance:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>To get Sass running, <span class="sb">`cd`</span> to that directory and run <span class="sb">`bundle`</span>  
Thereafter, you only need to run <span class="sb">`rake serve`</span> from the theme directory.

NOTE: If you get a 'not found' error after running <span class="sb">`bundle`</span>,  
run <span class="sb">`gem install bundler`</span>, then <span class="sb">`bundle install`</span>.
</code></pre></div></div>

<h2 id="part-of-your-process">Part of Your Process</h2>

<p>Finally, it’s not enough to have all of these wonderful docs in place and forgotten - they have to be a part of your project setup and launch checklist, and it needs to a part of every project, big or small.</p>

<p>Consistent, accurate, and complete project documentation will save time, make your code easier to maintain, improve team confidence, and do a great service to every developer who comes to your project after it’s finished. Docs Rocks!</p>

]]>
  </description>
  <pubDate>Tue, 12 Jul 2016 08:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/07/the-hidden-power-of-documentation/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/07/the-hidden-power-of-documentation/</guid>
</item>

    
      <item>
  <title>Drupal 8 File-based Configuration on Pantheon</title>
  <description>
    <![CDATA[<p>As Drupal 7 developers, we know how risky it is to edit production code and configuration live. However, we often let clients do it because using Features is hard. Drupal 8 has solved a lot of this headache with file-based configuration management, which allows <a href="http://www.gregboggs.com/drupal-configuration-best-practices/">file-based workflows</a> that gracefully avoid editing production directly. This article will show you how to use Drupal 8 configuration management and Pantheon’s amazing workflow tools to easily give your clients the ability to make configuration changes. We’ll show you how to seamlessly integrate those changes into your normal development workflow, so that you - and your clients - will win at Drupal!</p>

<h2 id="benefits-of-file-based-config">Benefits of File-based Config</h2>

<p>Storing active configuration directly in files has many benefits. The main benefit is that clients no longer have any reason to ever edit production configuration directly on production. Further, using file-based configuration removes the extra steps required to edit configuration in the database. These extra steps are confusing, can fail with fatal errors, and are made unnecessary by not storing configuration in the database.</p>

<h2 id="how-to-enable-file-based-config">How to Enable File-based Config</h2>

<p>The <a href="https://www.drupal.org/node/2416555">documentation for enabling this</a> isn’t too difficult. But, Pantheon recommends <a href="https://pantheon.io/docs/services-yml/">not storing the services.yml</a> file in version control. So, we’ll create a new services YAML file and include that along with the active configuration settings in settings.php. Before you start, export your current configuration to the sites/default/config folder and deploy that to Pantheon. Next, enable file storage by adding the following config.services.yml to your sites folder and using the following settings.php.</p>

<script src="https://gist.github.com/Greg-Boggs/cfa837b4efddf268916ba30ac07d9a8d.js"></script>

<p>Once deployed to Pantheon, the site will now be running in file-based configuration storage. To test this, go ahead and make a setting change in your local environment. You should see Drupal immediately write the change to site/default/config. Deploying this edit to Pantheon should make the Pantheon site immediately update to reflect the new configuration change. You just won at Drupal!</p>

<h2 id="configuration-workflow-on-pantheon">Configuration Workflow on Pantheon</h2>

<p>Now create a multidev for the client to use. Once the multidev is created, put the Pantheon account into SFTP mode because SFTP mode allows Drupal to edit the configuration files directory. So, now so the client can edit the configuration in Drupal and save their work with the Pantheon dashboard.</p>

<p><img src="/assets/images/blog/file-config1.png" alt="file-config1" /><span class="caption"><i class="fa fa-caret-up"></i>Changes ready to commit</span></p>

<p><img src="/assets/images/blog/file-config2.png" alt="file-config2" /><span class="caption"><i class="fa fa-caret-up"></i>Changes committed</span></p>

<p><img src="/assets/images/blog/file-config3.png" alt="file-config3" /><span class="caption"><i class="fa fa-caret-up"></i>Merge to development</span></p>

<p><img src="/assets/images/blog/file-config4.png" alt="file-config4" /><span class="caption"><i class="fa fa-caret-up"></i>Configuration deployed to development</span></p>

<p>When the client has completed their work, they can deploy it using the Pantheon deployment tools. You can merge in a client’s work into your own easily because the client is now using version control. Once the configuration is merged to Dev, the standard Pantheon workflow makes it easy to deploy these changes to production.</p>

<h2 id="dont-edit-production-directly">Don’t Edit Production Directly</h2>
<p>If production is in SFTP mode, clients can still edit production live. To prevent this, either keep production in Git mode, or use the <a href="https://www.drupal.org/project/config_readonly">Config Readonly</a> module to lock production configuration.</p>

<p>Drupal gives users the power to build and edit a website, and users can make dramatic changes to websites with just a few clicks in forms. With Pantheon’s tools and Drupal 8, we now have the ability to use those wonderful tools in a safe environment. The tools combined allow us to  bring clients into the workflow and manage deployments as a part of the team because Drupal 8 allows us to build robust, collaborative workflows like never before.</p>

]]>
  </description>
  <pubDate>Tue, 03 May 2016 11:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/05/drupal-8-file-based-configuration-on-pantheon/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/05/drupal-8-file-based-configuration-on-pantheon/</guid>
</item>

    
      <item>
  <title>Syncing Up with Drupal 8 and Browsersync</title>
  <description>
    <![CDATA[<p>Drupal 8 theming can be irksome with cache-rebuilding and browser refreshing, especially with responsive design. Wouldn’t it be great if you could just open your site on three different devices and have them update live as you edit your theme?</p>

<p>Let me introduce you to <a href="https://browsersync.io/">Browsersync</a>. Browsersync is a module for Node.js that allows you to sync your changes across browsers and devices.</p>

<h2 id="preparing-drupal">Preparing Drupal</h2>
<p>This article assumes you have a working install of Drupal 8 and a theme in place. If you don’t, check out Joe Komenda’s post, <a href="https://thinkshout.com/blog/2015/11/up-and-theming-with-drupal-8/">Up and Theming with Drupal 8</a>. This will get you going.</p>

<p>Once you have D8 installed, you’ll need to turn off caching. Rename <code class="highlighter-rouge">sites/example.settings.local.php</code> to <code class="highlighter-rouge">sites/example.settings.local.php</code>.  You can rename the files with editor of choice, if you prefer, or run the following command from your site root :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cp </span>sites/example.settings.local.php sites/default/settings.local.php
</code></pre></div></div>

<p>To be sure your changes are included, we’ll need to enable Drupal’s Null Cache Service. Uncomment the following line <code class="highlighter-rouge">sites/default/settings.php</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$settings</span><span class="p">[</span><span class="s1">'container_yamls'</span><span class="p">][]</span> <span class="o">=</span> <span class="nx">DRUPAL_ROOT</span> <span class="o">.</span> <span class="s1">'/sites/development.services.yml'</span><span class="p">;</span>
</code></pre></div></div>

<p>Next, let’s disable the render cache and dynamic page cache. Uncomment the following in the same file.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$settings</span><span class="p">[</span><span class="s1">'cache'</span><span class="p">][</span><span class="s1">'bins'</span><span class="p">][</span><span class="s1">'render'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'cache.backend.null'</span><span class="p">;</span>
<span class="nv">$settings</span><span class="p">[</span><span class="s1">'cache'</span><span class="p">][</span><span class="s1">'bins'</span><span class="p">][</span><span class="s1">'dynamic_page_cache'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'cache.backend.null'</span><span class="p">;</span>
</code></pre></div></div>

<p>Finally, add the following to <code class="highlighter-rouge">sites/development.service.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">parameters</span><span class="pi">:</span>
  <span class="s">twig.config</span><span class="pi">:</span>
    <span class="na">debug </span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">auto_reload</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">drush cr</code> from the root of your site to rebuild the cache.</p>

<h2 id="installing-browsersync">Installing Browsersync</h2>
<p>Browsersync is installed using Node Package Manager (NPM). If you already have Node.js, then you already have NPM. If you don’t have it installed, head over to <a href="https://nodejs.org/en/">nodejs.org</a>.</p>

<p>Once Node.js and NPM are set up, install Browsersync with <code class="highlighter-rouge">npm install -g browser-sync</code>.  This will install it globally so that you don’t have to reinstall it every time you spin up a new project. Test that your installation is working by running <code class="highlighter-rouge">browser-sync -h</code> in your terminal. That should show all the usage, commands, and options for the plugin.</p>

<h2 id="connecting-browsersync-to-drupal">Connecting Browsersync to Drupal</h2>
<p>Let’s make the magic happen by connecting Drupal and Browsersync. Go to the root of your Drupal theme folder. Run <code class="highlighter-rouge">browser-sync start</code>. Browsersync will generate a script tag for you to place just before the closing body tag. Browser sync also has  UI. You’ll see a URL for your localhost and one for sharing the connection to other devices on the same network.</p>

<p><img src="https://raw.githubusercontent.com/heypaxton/Posts/master/img/browsersync-start.png" alt="Browsersync start" /></p>

<p>Let’s add the script tag to your <code class="highlighter-rouge">html.html.twig</code> file just above closing <code class="highlighter-rouge">&lt;/body&gt;</code> tag. This will add a connection to your Drupal environment and Browsersync.</p>

<script src="https://gist.github.com/levelos/0187b29071c3a56c3579ea2d95f42296.js"></script>

<p>Since Drupal will most likely be running on a local server configured by your LAMP stack, you’ll need to run Browsersync with the proxy option. Run <code class="highlighter-rouge">browser-sync start --proxy &lt;your site localhost&gt;</code> in your terminal. For example, if your site is running at http://mysite.dev then use <code class="highlighter-rouge">browswersync start --proxy mysite.dev</code> Your browser will open automatically to http://localhost:3000. Now you should see “Connected to BrowswerSync” in the top right of your browser.</p>

<h2 id="watching-for-changes">Watching for Changes</h2>
<p>Although Browswersync and Drupal are connected, we need to watch for changes. Let’s run Browsersync with the the <code class="highlighter-rouge">--files</code> option. We’ll watch changes to our CSS file and have it automatically update the browser with our changes. In your terminal run:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>browswer-sync start <span class="nt">--proxy</span> mysite.dev <span class="nt">--files</span> <span class="s2">"css/*.css"</span> <span class="nt">--no-inject-changes</span>
</code></pre></div></div>

<p>This command tells Browswersync to start and watch for changes to files with the <code class="highlighter-rouge">.css</code> extension in the <code class="highlighter-rouge">css</code> directory. The <code class="highlighter-rouge">--no-inject-changes</code> option tells Browsersync to refresh the browser window instead of just injecting a new version of the stylesheet. Injecting the changes won’t work because of the way Drupal imports our stylesheets. We need to reload to get the new version.</p>

<p>Try opening your site in Chrome, Firefox, and even on your mobile device browser. Once you make a change, you should see all of them automatically update.</p>

<h2 id="where-to-go-from-here">Where to Go from Here</h2>
<p>Browsersync is a great tool for fast development and syncing your changes across multiple devices without having to manually reload each one. I recommend integrating Browswersync with your task manager of choice. Here are some resources to help you integrate with Grunt or Gulp:</p>

<ul>
  <li><a href="https://browsersync.io/docs/grunt/">https://browsersync.io/docs/grunt/</a></li>
  <li><a href="https://browsersync.io/docs/gulp/">https://browsersync.io/docs/gulp/</a></li>
</ul>
]]>
  </description>
  <pubDate>Wed, 27 Apr 2016 09:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2016/04/syncing-up-with-drupal8-and-browsersync/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/04/syncing-up-with-drupal8-and-browsersync/</guid>
</item>

    
      <item>
  <title>The Next Chapter for Mandrill</title>
  <description>
    <![CDATA[<p>It’s easy to take for granted all the great tools we use on the web, everything from email, to social media, to git hosting. Many of these services are free or use advertising to support the sometimes significant costs to run them. <a href="https://www.mandrill.com/">Mandrill</a> is one of those great tools and one that we’ve been recommending to our clients on a consistent basis. If you’re unfamiliar with Mandrill, it’s a transactional email service for sending email ranging from password resets to Commerce receipts. Now we realize that your webserver can already send email, so why bother with a service like Mandrill? It offers three major advantages:</p>

<ul>
  <li>Deliverability</li>
  <li>Reporting and accountability</li>
  <li>Templated emails that look great across all email clients</li>
</ul>

<p>As the team who originally partnered with <a href="http://mailchimp.com/">MailChimp</a> to build the <a href="https://www.drupal.org/project/mandrill">Mandrill module</a>, we might be a bit biased, but we think it’s one of the best transactional email services out there that integrates with Drupal. We have many clients that use both <a href="https://www.drupal.org/project/mailchimp">MailChimp</a> and Mandrill, and many that use Mandrill by itself. In fact, we just completed a <a href="https://www.drupal.org/node/2683599">Mandrill 8.x-1.0-alpha1</a> release with all the great features of Mandrill for Drupal 8.</p>

<p>Change is inevitable though, and MailChimp has decided to refocus the Mandrill service on their core value of delivering customized email to users. This doesn’t mean Mandrill is going away by any means, just that it’s new focus will be on delivery of 1:1 customized emails as opposed to 1:many emails. MailChimp already provides a great way of delivering 1:many emails as a part of your email campaigns, and Mandrill will focus on the customized 1:1 delivery of email. This should reduce the number of users using Mandrill to send 1:many emails, many of which are spammers abusing the system.</p>

<p>You can read more about the announcement on the <a href="http://blog.mandrill.com/important-changes-to-mandrill.html">MailChimp blog</a> along with the <a href="https://mandrill.zendesk.com/hc/en-us/articles/217467117-Mandrill-MailChimp-Transition-FAQs">FAQ</a> they prepared for customers. At the heart of the change is the requirement of having a paid MailChimp account and purchasing Mandrill credits to use the Mandrill service. Your MailChimp and Mandrill accounts can be merged on March 16th and a single monthly subscription will be maintained going forward. According to the MailChimp FAQ, the minimum cost of having both services will be $10 for the basic MailChimp account and $20 for 25,000 Mandrill emails sent in a month.</p>

<p>This does mean Mandrill as a free service is going away and for some people, this means that they’ll need to find an alternative transactional email service. The good news is that there are alternatives out there, and some are even honoring Mandrill’s free level. If you’re looking for one of those free alternatives, try <a href="https://www.sparkpost.com/">Sparkpost</a>, <a href="http://aws.amazon.com/ses/details/">Amazon SES</a>, or <a href="https://sendgrid.com/">SendGrid</a>. Not all of these services have Drupal modules at this point, but many do, and could be worth trying out.</p>

<p>Our recommendation for many of our clients is to stick with Mandrill for a number of reasons. For those that already use MailChimp and Mandrill, the additional monthly cost is not significant enough to switch in many cases, and having a single account to manage can be beneficial. For those clients that only use Mandrill now, adding a new monthly cost can feel a bit more burdensome. The stability of the Mandrill service and Drupal module does outweigh the cost of switching in many situations, but we are sensitive to our clients’ budgets and may look at the alternatives if it makes sense. It’s important to note that all Mandrill accounts must be merged with an existing MailChimp account by April 27th.</p>

<p>What does this mean for the <a href="https://www.drupal.org/project/mandrill">Mandrill module</a> for Drupal and our ongoing support and maintenance of it? MailChimp has assured us they are committed to the Mandrill service for the foreseeable future and will be looking at ways MailChimp and Mandrill can work better together. We also see a lot of ways the two modules can be combined and managed as one, making it easier for users to view activity across the two services in one place. At this point, we will continue our support and development of the module, including the new <a href="https://www.drupal.org/node/2683599">Mandrill D8</a> release. We are excited to see where the Mandrill module goes and the additional value that MailChimp adds to the service going forward. Stay tuned for the next chapter of Mandrill!</p>
]]>
  </description>
  <pubDate>Wed, 09 Mar 2016 10:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2016/03/next-chapter-for-mandrill/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/03/next-chapter-for-mandrill/</guid>
</item>

    
      <item>
  <title>Porting ThinkShout to Drupal 8</title>
  <description>
    <![CDATA[<p>A fundamental part of ThinkShout’s philosophy and business is to not only use great open source tools, but to <a href="http://thinkshout.com/blog/2015/03/the-how-and-why-of-open-source/">actively give back</a> to the open source community. The most recognizable part of that contribution is in the form of Drupal modules: over 60,000 Drupal sites run on ThinkShout technology! This strategy has been a huge <a href="http://thinkshout.com/blog/2014/09/small-business-of-nonprofits/">win for our clients</a>, who get features, bugfixes, and security updates from the community because they are sharing code. We benefit from this work as well, as it enhances our profile in the community and helps us generate leads for new projects. Of course, the vast majority of these sites are built on Drupal 7, which <a href="https://www.drupal.org/drupal-7-released">released</a> in the same month that <a href="http://thinkshout.com/blog/2016/01/five-years/">ThinkShout was founded</a>.</p>

<p>The exciting and much-anticipated release of Drupal 8 has given us a lot to think about. Internally, we’ve been running a Drupal 8 “book club” to give our development team a chance to dive in and figure out what’s going on with D8. While we’ve bathed in the glories of Composer, Twig, and YAML files galore, we’ve also had a chance to start upgrading a few of our favorite modules to Drupal 8!</p>

<p>With support from the incredible folks over at <a href="http://mailchimp.com/">MailChimp</a>, we’ve already got a working release of the <a href="https://www.drupal.org/project/mailchimp">MailChimp integration module</a> for Drupal 8, and are hard at work on the <a href="https://www.drupal.org/project/mandrill">integration with Mandrill</a>, MailChimp’s awesome transactional email service, which may have a Drupal 8 release before this blog post goes live.</p>

<p>This is a great start, but it’s really only the tip of the iceberg: ThinkShout has about 50 modules released for Drupal 7! As much as we’d love to dive in and update all of them for Drupal 8 today, that’s not particularly practical. To better focus our work, I analyzed some of these modules so we can prioritize them and look for opportunities to work with our partners and clients to get the most useful, popular, and important modules upgraded to Drupal 8 first.</p>

<p>Of our 50 modules, we started by de-prioritizing anything that was:</p>

<ul>
  <li>
    <p>Extremely narrow in purpose (<a href="https://www.drupal.org/project/er_plus">Entity Reference Plus Data</a>)</p>
  </li>
  <li>
    <p>Blocked by another module’s Drupal 8 development (<a href="https://www.drupal.org/project/apachesolr_geo">Apache Solr Geo</a>, lots of others)</p>
  </li>
  <li>
    <p>Offers modest functionality replaceable by custom code (<a href="https://www.drupal.org/project/footer_message">Footer Message</a>) or</p>
  </li>
  <li>
    <p>Just not seeing much usage (<a href="https://www.drupal.org/project/instagram">Instagram Realtime</a>)</p>
  </li>
</ul>

<p>That left us with around 10 projects, among them MailChimp and Mandrill, which we were already working on. We wanted to pick a manageable number of these remaining modules to get started on.</p>

<p>Based on community usage, the priorities of our clients, and perceived usefulness, it was clear that the <a href="https://www.drupal.org/project/registration">Registration module</a> belonged on this list. The story of Registration’s development is connected to the story of ThinkShout’s fledgling years and open source philosophy, so it’s an added bonus that Registration will be part of our early push into Drupal 8.</p>

<p>ThinkShout has also carved out a reputation as experts in the CRM world, with <a href="https://www.drupal.org/project/redhen">RedHen</a>, our leading Drupal-integrated CRM, and the <a href="https://www.drupal.org/project/salesforce">Salesforce Suite</a>, a fabulous tool for integrating Drupal sites with Salesforce. Though these modules don’t have the 5-digit usage numbers that Registration or MailChimp have, they still have lots of users who are very engaged, and are central to the needs of our clients. We added them to the top of the list for Drupal 8 consideration.</p>

<p>In thinking about the rest of our modules and the nature of our work, it became clear that these three projects really stand out from the rest: they are our “Big 3”, and we set about creating a roadmap for developing them on Drupal 8.</p>

<p>You can already see the beginnings of this work! At our team sprint on February 11, we put together an outline for bringing RedHen to Drupal 8, and pushed the first commits to Drupal.org.</p>

<p><img src="/assets/images/blog/porting-thinkshout.jpg" alt="porting-thinkshout.jpg" />
<em>These are our sprint faces!</em></p>

<p>As of February 11, all of the Big 3 have nominal Drupal 8 branches.</p>

<p>As we kick off four Drupal 8 sites in the first part of this year, we will be working with our clients to bring Registration, RedHen CRM, and Salesforce Suite to Drupal 8. All three should update beautifully, as they are built on top of Entity API, which is part of Core in D8.</p>

<p>We will also be focusing our internal open source contribution hours on these three projects to kickstart their jump into the Drupal 8 sea. If you’re looking for awesome CRM or registration systems for your Drupal 8 site, fear not! They are on their way.</p>

<p>We have two Drupal 8 sites utilizing ThinkShout core technologies scheduled for launch this summer, so look for a release of RedHen in the spring!</p>

<p>Our next round of prioritization will depend significantly on the progress of Commerce solutions in Drupal 8: once that landscape settles, we have some projects that will jump up that priority list, including:</p>

<ul>
  <li>
    <p><a href="https://www.drupal.org/project/registration_commerce">Registration Commerce</a>, our favorite paid registration solution</p>
  </li>
  <li>
    <p><a href="https://www.drupal.org/project/redhen_donation">RedHen Donation</a>, our CRM-integrated, single-page donation tool</p>
  </li>
  <li>
    <p><a href="https://www.drupal.org/project/commerce_iats">Commerce IATS</a>, the payment integration module for our favorite nonprofit-focused payment processing partner, <a href="http://home.iatspayments.com/">iATS Payments</a></p>
  </li>
</ul>

<p>So if you’re a fan of our Commerce integrations, or <a href="https://www.drupal.org/project/addtocal">Add to Cal</a>, or even little <a href="https://www.drupal.org/project/bean_entity_view">Bean Entity View</a> (I know I am): stay tuned! We love these tools, we love that you’re using them, and we look forward to bringing you even more awesome stuff for Drupal 8 than we have for Drupal 7!</p>

]]>
  </description>
  <pubDate>Tue, 23 Feb 2016 10:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2016/02/porting-thinkshout-to-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2016/02/porting-thinkshout-to-drupal-8/</guid>
</item>

    
      <item>
  <title>Up and Theming with Drupal 8</title>
  <description>
    <![CDATA[<p>Drupal 8 is <a href="https://www.drupal.org/8">finally here</a>! We’ve been digging into the code and learning how to install D8 in a way that allow us to sync sites and use it for production work. A lot of things have changed, which we covered in our previous article, <a href="http://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/">Up and Running with Drupal 8</a>. The next step is to see what’s changed in the theming layer, installing a basic theme, and working with the new Twig templating system. There’s a good deal to cover, so let’s <a href="http://twig.sensiolabs.org/">jump in</a>!</p>

<h2 id="creating-a-theme">Creating a Theme##</h2>

<p>The steps for setting up a basic site theme are fairly simple: create a <code class="highlighter-rouge">custom/THEMENAME</code> directory in <code class="highlighter-rouge">web/themes</code>, and then add a <code class="highlighter-rouge">THEMENAME.info.yml</code> file with the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">THEMENAME Theme</span>
<span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">D8</span><span class="nv"> </span><span class="s">theme</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">THEMENAME</span><span class="nv"> </span><span class="s">site.'</span>
<span class="na">package</span><span class="pi">:</span> <span class="s">Custom</span>
<span class="c1"># base theme: classy</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">theme</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">1.0</span>
<span class="na">core</span><span class="pi">:</span> <span class="s">8.x</span>
<span class="na">regions</span><span class="pi">:</span>
  <span class="na">header</span><span class="pi">:</span> <span class="s">Header</span>
  <span class="na">content</span><span class="pi">:</span> <span class="s">Content</span> <span class="c1"># required!</span>
  <span class="na">sidebar_first</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Sidebar</span><span class="nv"> </span><span class="s">first'</span>
  <span class="na">footer</span><span class="pi">:</span> <span class="s">Footer</span>
</code></pre></div></div>

<p>Then you can enable your theme (<code class="highlighter-rouge">administer » themes</code>) in the interface. Note that uncommenting  <code class="highlighter-rouge">base theme: classy</code> will cause you to set Classy as a parent theme. We feel that Classy is great if you want a lot of useful examples, but really clutters up the markup, so use at your own discretion. <a href="https://www.drupal.org/node/2575421">After rc1</a>, the default theme will be ‘stable,’ and you may want to pull all of the core templates into your theme to ensure you’re working from the latest updated template code.</p>

<p>Also, the theme name must not contain hyphens. So <code class="highlighter-rouge">/theme-name/</code> is invalid (it won’t even show up!), but <code class="highlighter-rouge">/theme_name/</code> is fine.</p>

<p>Now we’ll want to start customizing our theme. Let us say we have a content type called ‘blog’ (machine name: <code class="highlighter-rouge">blog</code>), with a field type called ‘Publish Date’ (machine name: <code class="highlighter-rouge">field_publish_date</code>).</p>

<p>Despite setting the label of <code class="highlighter-rouge">field_publish_date</code> to ‘inline,’ it’s wrapping to a new line due to the fact that it’s a simple, unstyled <code class="highlighter-rouge">&lt;div&gt;</code>.</p>

<p>Worse, it has no classes to specifically style it. Let’s set ourselves some goals:</p>

<ol>
  <li>Add the inline styling class(s).</li>
  <li>Change the markup for this field, so that we have a class for the label.</li>
  <li>Add CSS to style the label, but ONLY for the ‘Blog’ content type.</li>
</ol>

<p>The documentation for this seemingly simple task is obfuscated and evolving right now, but we were able to get it working correctly using the following steps:</p>

<p><strong>Step 1</strong>: Turn on <a href="https://www.drupal.org/node/1906392">twig debug mode</a>. We also found it helpful at this point to make a copy of <code class="highlighter-rouge">web/sites/example.settings.local.php</code> in <code class="highlighter-rouge">web/sites/default/</code> and uncomment the following in <code class="highlighter-rouge">settings.php</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">'/settings.local.php'</span><span class="p">))</span> <span class="p">{</span>
  <span class="k">include</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">'/settings.local.php'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will allow you to <a href="https://www.drupal.org/node/2598914">disable caching</a> during development, which is no longer a simple checkbox in the performance section. Note that disabling caching can be tricky; the <code class="highlighter-rouge">drush cr</code> (cache rebuild) command is the most reliable way to ensure the cache is really cleared. You’ll also have to rebuild the cache at least once after turning caching off, so the new cache settings are applied.</p>

<p><strong>Step 2</strong>: Make a custom field template.</p>

<p>In this case, the suggested debug fields are:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- FILE NAME SUGGESTIONS:
   * field--node--field-publish-date--blog.html.twig
   * field--node--field-publish-date.html.twig
   * field--node--blog.html.twig
   * field--field-publish-date.html.twig
   * field--datetime.html.twig
   x field.html.twig
--&gt;</span>
<span class="c">&lt;!-- BEGIN OUTPUT from 'core/modules/system/templates/field.html.twig' --&gt;</span>
</code></pre></div></div>

<p>The highlighted line above shows the template currently being used, suggestions for increased specificity, and the file location (<code class="highlighter-rouge">core/modules/system/templates/</code>).</p>

<p>We want to update <code class="highlighter-rouge">field_publish_date</code> globally, so we’ll create a template called <code class="highlighter-rouge">field--field-publish-date.html.twig</code></p>

<p>To do this, we copy <code class="highlighter-rouge">field.html.twig</code> from the core theme (see the ‘BEGIN OUTPUT’ line above for the path), and rename it in our theme’s folder to <code class="highlighter-rouge">field--field-publish-date.html.twig</code>. Now when we reload, we see the following (if your cache is disabled, of course, otherwise drush cr will clear the cache):</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- FILE NAME SUGGESTIONS:
   * field--node--field-publish-date--blog.html.twig
   * field--node--field-publish-date.html.twig
   * field--node--blog.html.twig
   x field--field-publish-date.html.twig
   * field--datetime.html.twig
   * field.html.twig
--&gt;</span>
<span class="c">&lt;!-- BEGIN OUTPUT from 'themes/custom/THEMENAME/templates/field--field-publish-date.html.twig' --&gt;</span>
</code></pre></div></div>

<p>Now we can begin to update the markup. The relevant code is:</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if label_hidden %}
  ... (we don’t care about the label_hidden stuff)
{% else %}
  <span class="nt">&lt;div</span><span class="err">{{</span> <span class="na">attributes</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span><span class="err">{{</span> <span class="na">title_attributes</span> <span class="err">}}</span><span class="nt">&gt;</span>{{ label }}<span class="nt">&lt;/div&gt;</span>
    ...
{% endif %}
</code></pre></div></div>
<p></p>

<p>To add the inline styling class, we add the following to the top of the template (below the comments):</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%
  set classes = [
    'field--label-' ~ label_display,
  ]
%}
</code></pre></div></div>
<p></p>

<p>And then update the label’s parent div attributes:</p>

<p>before: <code class="highlighter-rouge">&lt;div&gt;</code>
after: &lt;div{{ attributes.addClass(classes) }}&gt;</p>

<p>Now the correct class is in place, but we see no change yet - because the <code class="highlighter-rouge">&lt;div&gt;</code> isn’t populating any classes. To fix that, we add the following, again at the top of the template:</p>

<p></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{%
  set title_classes = [
    'field__label',
    'field__publish-date-label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}
</code></pre></div></div>
<p></p>

<p>And update the div:</p>

<p>before: <code class="highlighter-rouge">&lt;div&gt;&lt;/div&gt;</code>
after: <code class="highlighter-rouge">&lt;div {{ title_attributes.addClass(title_classes) }}&gt;{{ label }}&lt;/div&gt;</code></p>

<p>Rebuild the cache (drush cr) and… success! well sort of - we still have to add CSS. Note that we also added a custom class of ‘field__publish-date-label’ in case we want to style it directly.</p>

<p><strong>Step 3</strong>: Add a <code class="highlighter-rouge">THEMENAME.libraries.yml</code> file to hold attachment library definitions.</p>

<p>This is pretty simple; it’s a file with the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">blog</span><span class="pi">:</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">1.x</span>
  <span class="na">css</span><span class="pi">:</span>
    <span class="na">theme</span><span class="pi">:</span>
      <span class="s">css/blog.css</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">js</span><span class="pi">:</span>
    <span class="s">js/blog.js</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dependencies</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">core/jquery</span>
</code></pre></div></div>

<p>We then add the directories (<code class="highlighter-rouge">/css</code> and <code class="highlighter-rouge">/js</code>) and files (<code class="highlighter-rouge">blog.css/js</code>). We’ve also added a jQuery dependency, just so you can see how that’s done. If we had something simple that could be done with <a href="http://vanilla-js.com/">Vanilla JS</a> we could leave it off. Note that this won’t actually do anything until we follow step 4 below.</p>

<p><strong>Step 4</strong>: Add a <code class="highlighter-rouge">THEMENAME.theme</code> file to hold theme hooks (this is actually a PHP file, so start it with <code class="highlighter-rouge"><span class="cp">&lt;?php</span></code>).</p>

<p>This is the code that appends the library based on the content type. The trickiest part of this is figuring out the correct format of <code class="highlighter-rouge">hook_preprocess_HOOK()</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">THEMENAME_preprocess_node__blog</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$variables</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$variables</span><span class="p">[</span><span class="s1">'#attached'</span><span class="p">][</span><span class="s1">'library'</span><span class="p">][]</span> <span class="o">=</span> <span class="s1">'THEMENAME/blog'</span><span class="p">;</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The theme hook format for content types is to use <code class="highlighter-rouge">node__MACHINENAME</code> format - two underscores.</p>

<p>After that, rebuild your cache (<code class="highlighter-rouge">drush cr</code>), and your CSS and JS files should be loading on every instance of that content type, regardless of the page. (full or teaser)</p>

<p>And that’s it! Note that we could have changed the markup in any number of ways to suit our designs, or even make the template specific to the content type as well as the field.</p>

<h3 id="disclaimer">Disclaimer###</h3>

<p>The post was written at the end of 2015 while Drupal 8 was still in a Release Candidate stage. While some effort will be made to keep the post up-to-date, if it’s after 2016, you should probably add the current year to your Google search, or better yet, check the docs on <a href="http://drupal.org">Drupal.org</a>.</p>
]]>
  </description>
  <pubDate>Mon, 23 Nov 2015 06:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2015/11/up-and-theming-with-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/11/up-and-theming-with-drupal-8/</guid>
</item>

    
      <item>
  <title>Up and Running with Drupal 8</title>
  <description>
    <![CDATA[<p>It’s November 2015, and Drupal.org is rolling out <a href="https://www.drupal.org/project/drupal">Drupal 8 release candidates</a>! Heck, Drupal 8 is coming out <em>this week</em>. For many devs, that means we need to figure out how to install, sync, and set up a site theme. Here at ThinkShout, learning is part of the job - we have dedicated time every week to learn new things and share them, be it in a blog post, at our weekly engineering meetings, or at our weekly team lunch.</p>

<p>For the last few months, we’ve made learning Drupal 8 our singular focus. The ‘D8 Bookclub’ has been getting assignments, doing their homework, and sharing their findings internally. We’ve now spent enough time with Drupal 8 that we can share what we’ve learned, the little gotchas and hard-to-find code snippets, as well as the general change in philosophy that has occurred in the shift from D7 to D8.</p>

<p>We generally agree that one of the things keeping people from digging into Drupal 8 is the difficulty of getting it installed and running in a deployable way, which is a must-have if you want to have a team working on a project. This article will walk you through Drupal 8 installation and configuration sync. The follow-up article (<em>Up and Theming with Drupal 8</em>) will cover theme setup and configuration, so that you can finally get going with theming in D8.</p>

<h2 id="installing-drupal-8">Installing Drupal 8</h2>

<p>The <a href="https://github.com/drupal-composer/drupal-project">composer install</a> method is being widely proposed as the replacement for <code class="highlighter-rouge">drush make</code>. The <code class="highlighter-rouge">composer.json</code> file is to <code class="highlighter-rouge">composer install</code> what a <a href="http://www.drush.org/en/master/make/">drush make</a> file is to <code class="highlighter-rouge">drush make</code>. The drupal-composer github repo has a composer template called <a href="https://github.com/drupal-composer/drupal-project">drupal-project</a> that will get us up and running with just the basics necessary to have a working site.</p>

<p>For command-line manipulation, you’ll need to be using <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a>. Like most dev shops, we use version control (<a href="http://xkcd.com/1597/">Git</a>) as well as a <code class="highlighter-rouge">local-&gt;dev-&gt;test-&gt;live</code> server setup. There are a few gotchas here:</p>

<p>The composer template mentioned above works great for a basic D8 install, but if you want it customized (additional packages, post-install commands, etc), you will have to:</p>

<ul>
  <li><a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile</li>
  <li>unzip the files</li>
  <li>update the <code class="highlighter-rouge">composer.json</code> and <code class="highlighter-rouge">scripts/composer/post-install.sh</code> files</li>
  <li>run <code class="highlighter-rouge">composer install</code> locally.</li>
</ul>

<p>This is the method we’ll be using for the rest of this post.</p>

<p>First, <a href="https://getcomposer.org/doc/00-intro.md">install composer</a>. We’re using OSX with <a href="http://brew.sh/">Homebrew</a>, so this is fairly simple - <code class="highlighter-rouge">brew install composer</code>. Note: after implementing this, add this to your <code class="highlighter-rouge">.bashrc</code> (or similar):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.composer/vendor/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<p>Next, ensure you have <a href="https://www.lullabot.com/articles/switching-drush-versions">Drush 8</a> installed. We prefer the <a href="http://docs.drush.org/en/master/install-alternative/#install-a-global-drush-via-composer">Composer global install</a> approach to make updating Drush as simple as running <code class="highlighter-rouge">composer global update</code>.</p>

<p>Next, <a href="https://github.com/drupal-composer/drupal-project/archive/8.x.zip">download</a> the full composer profile, and unzip it into an appropriate local directory (We use a <code class="highlighter-rouge">~/Sites/</code> directory to hold all of our projects).</p>

<p>Note: the Drupal Composer project updates regularly. If you run into any errors, re-download it. You could alternately create an <a href="https://www.drupal.org/node/2210443">installation profile</a> in the <code class="highlighter-rouge">web/profiles</code> folder, but that seems to be a tad under-documented and still not fully baked.</p>

<p>Now that we have a default site scaffold in place, we can get back to the post-install method. If you want to run the site installer after composer installs Drupal, in the <code class="highlighter-rouge">post-install.sh</code> file, you would add:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>web<span class="p">;</span>drush si <span class="nt">--site-name</span><span class="o">=</span><span class="s2">"SITENAME"</span> <span class="nt">--db-url</span><span class="o">=</span>mysql://root:PASSWORD@HOSTNAME/DBNAME <span class="nt">-y</span><span class="p">;</span><span class="nb">cd</span> ../
</code></pre></div></div>

<p>For the above, replace <code class="highlighter-rouge">SITENAME, PASSWORD, HOSTNAME</code>(we use localhost) and <code class="highlighter-rouge">DBNAME</code>.</p>

<p>One of the D8 Bookclub challenges was completing the installation without any warnings appearing on the Status Reports page at <code class="highlighter-rouge">/admin/reports/status</code>. We also want to specify the configuration sync directory, so that it’s not site-unique.</p>

<p>The trick here is to use a series of permission and site config tweaks. After the site install code above, add the following to your <code class="highlighter-rouge">post-install.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>777 web/sites/default/s<span class="k">*</span><span class="p">;</span>

<span class="c">#Prepare the custom sync directory, which will sit outside of the web root</span>

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> configs <span class="o">]</span>
<span class="k">then </span><span class="nb">mkdir</span> <span class="nt">-m777</span> configs
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">config_directories['sync'] = '../configs';"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">settings['trusted_host_patterns'] = array('SITENAME</span><span class="se">\.</span><span class="s2">dev</span><span class="nv">$'</span><span class="s2">,);"</span> <span class="o">&gt;&gt;</span> web/sites/default/settings.php

<span class="nb">chmod </span>444 web/sites/default/s<span class="k">*</span>

<span class="nb">chmod</span> <span class="nt">-R</span> 777 web/sites/default/files
</code></pre></div></div>

<p>This will make the <code class="highlighter-rouge">settings.php</code> file editable, create a sync directory below the web root (bonus security!), add the sync directory path, add the <a href="https://api.drupal.org/api/drupal/core!lib!Drupal!Core!DrupalKernel.php/function/DrupalKernel%3A%3AsetupTrustedHosts/8">trusted host pattern</a> (a new D8 requirement), secure the file, and make the <code class="highlighter-rouge">web/sites/default/files</code> folder globally writable.</p>

<p>Now you’re ready to run the installation! From the base directory, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer <span class="nb">install</span>
</code></pre></div></div>

<p>This will take a while, since it’s downloading Drupal and all the modules.
After initial installation, perform a full export and an immediate import/sync of your site configuration profile. This can be done two ways:</p>

<ol>
  <li>
    <p>Via the gui: <code class="highlighter-rouge">/admin/config/development/configuration/full/export</code></p>

    <p>Save this export file! Any subsequent sites will need this as a starting point so that entity mismatches don’t occur.</p>
  </li>
  <li>
    <p>Via Drush (run from the <code class="highlighter-rouge">/web</code> directory):</p>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-export
drush config-import <span class="nb">sync</span>
</code></pre></div></div>

<p>This will export and then sync all of your config files in the configuration directory we specified in the post-install script.</p>

<p>You would then check in this version of the site - a commit message such as ‘Base Site profile’ would be helpful. Here’s a quick set of command-line git repo creation commands, starting with an installation of hub, the <a href="https://hub.github.com/">command-line wrapper</a> for GitHub (this will allow you to use GitHub’s 2-factor authentication):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>hub
git init
hub create
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s1">'Base Site profile'</span>
git push <span class="nt">--set-upstream</span> origin master
</code></pre></div></div>

<p>After that, you can check out additional sites by creating a directory, cd into that directory, and running a git clone command inside it, such as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:USER/REPOSITORY.git <span class="nb">.</span>
</code></pre></div></div>

<p>Now you can run `composer install to build your clone.</p>

<p>Optional: edit the <code class="highlighter-rouge">post-install.sh prior to running </code>composer install` if you’d like your clone to have a different hostname, db, etc.</p>

<h2 id="syncing-sites">Syncing Sites##</h2>

<p>Site configurations are only exportable to sites that have the same UUID and have synced using the shared base configuration profile. To find your site’s UUID, cd to the web folder of the base site, then run <code class="highlighter-rouge">drush config-get system.site</code>. After that, any new site can be synced using these steps immediately after a fresh install (either via download or Git clone):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-edit system.site <span class="o">(</span>Update the UUID to match the base site<span class="o">)</span>
</code></pre></div></div>

<p>If you manually saved the files, upload the base site config profile, but do not sync it</p>

<p>-OR-</p>

<p>If you cloned the repo, the files should be in place. If the git repo has moved beyond the base install, check out the repo at the ‘Base Site Profile’ stage mentioned above using <code class="highlighter-rouge">git reset --hard $SHA1</code> (where $SHA1 is the SHA of the Base Site Profile)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drush config-import <span class="nt">--partial</span>
</code></pre></div></div>

<p>Important Note: Every new instance MUST start with the same base configuration profile, otherwise you may have entity mismatch issues, even with the partial import. After the initial sync is complete, you can pull in config files via Git and sync will work as expected, even over multiple configuration changes.</p>

<h2 id="creating-a-theme">Creating a Theme##</h2>

<p>This will be covered in our next post: “Up and Theming with Drupal 8.”</p>

<h2 id="disclaimer">Disclaimer##</h2>

<p>The post was written at the end of 2015 while Drupal 8 was still in a Release Candidate stage. While some effort will be made to keep the post up-to-date, if it’s after 2016, you should probably be adding the year you are currently in to your Google search, or better yet, check the docs on <a href="https://www.drupal.org/drupal-8.0">Drupal.org</a>.</p>
]]>
  </description>
  <pubDate>Wed, 18 Nov 2015 08:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/11/up-and-running-with-drupal-8/</guid>
</item>

    
      <item>
  <title>Committing to D8 Core - A Little Bit Goes a Long Way</title>
  <description>
    <![CDATA[<p>It was the last day of DrupalCon LA and after a long week of sessions, getting to know fellow Drupalistas, and partying until the wee hours, I mustered what little brainpower I had left and made my way to the “First Timer’s Sprint.” Joined by my ThinkShout colleagues, Joe and Nancy, we arrived with beautiful visions of giving back to our community by contributing in some capacity to Drupal 8 core. And so it begins…</p>

<p><img src="/assets/images/blog/image_1.jpg" alt="image_1.jpg" /></p>

<p>We arrived just in time to set our development environment up with a couple hundred other hopeful contributors, and were pleasantly surprised by how quickly that process went and how helpful the mentors were. As soon as we were all set up, the conference staff sent us on our merry way into the next room.</p>

<p>As you may or may not know, Drupal core is enormous! It can be a big, daunting pile of directories and folders that can go down several levels. For a newer developer (and even more seasoned ones, I hear) it takes a great deal of time to navigate this powerful platform. As a result, I was faced with too many possible issues to work on and very little background for how the contributing process works. I’m willing to bet most engineers have been in a similar situation at one time or another and can likely relate. This experience has a name - it’s called “decision fatigue,” where one is faced with so many possibilities to choose from that they become overwhelmed and may even check out entirely. I was there.</p>

<p>Having recognized this feeling before, I piped up and explained to our mentor that we would work more effectively if we were given a single focus or direction. This seemed to work well, and he provided us with a handful of suggestions. That was all fine and good, but after looking at the “Novice” queue, I felt my deer-in-headlights gaze only worsen. Still hungry for a way to gain some practical experience, I reflected back on the options our mentor suggested. He mentioned that “rerolls are easy,” and that seemed like a good place for me to start.</p>

<p>Seizing the moment, I nabbed the nearest mentor and asked him if he could spare a few minutes to help walk me through a reroll. Fortunately, he had a moment to spare, and pointed me to the documentation. Interestingly, this mentor happened to identify with me as a site-builder with little coding experience, yet he was knowledgeable and knew enough Git tricks to be an active participant in the Drupal issue queues.</p>

<p>With this mentor by my side, we dove into the oldest D8 “needs reroll” issue and went to town. Much to my surprise, this issue didn’t take long, but it also helped that another contributor had already rerolled the patch. No problem! I made a comment stating that the patch had been rerolled, how old the issue was (seven years, in this case), and removed the “needs reroll” tag from the issue. Though it felt like a negligible change, my mentor reassured me that I’d  spared another developer from having to go through the same process and reach the same conclusion. Consequently, the issue had moved on to a more progressive state, and there was much rejoicing.</p>

<p>After that was said and done, I went back to the issue queue feeling a tad more confident. Just moments later, our original mentor rushed excitedly back to our table. “Who wants to commit to core?” he asked. We all looked around at each other, not quite sure what to make of it, and responded with a cautiously optimistic “sure, we can help!”</p>

<p>Everything happened rather quickly, which was surprising considering how long it takes to get an average issue through the complete process. Here’s how it went down: There was an issue. A dev in another sprinting room was asked to write a patch. Another dev revised the patch by improving it slightly, and it was then passed to our table to go through the review process. A dev evaluation was put forth, then the issue was passed back for additional review. Finally, it was submitted to be pushed into core.</p>

<p>This was my first DrupalCon and, little did I know, they have a very important tradition - every DrupalCon sprint ends with a live commit by Dries, the founder of Drupal. Our team was lucky enough to be part of this ritual! So, after a full week of delightful Drupal-related shenanigans, I found myself on stage pressing the enter key on Dries’ computer to push our commit to D8 core. The button was pushed and the explosion of celebration and cheers from the audience was nearly deafening.</p>

<p>In this moment, I truly witnessed the heart of the Drupal community in action - this amazing tool could not exist without a number of developers carefully crafting code in accordance with Drupal best practices, and countless generous individuals attentively reviewing the proposed changes. It really does take a village, and the good news is that it doesn’t require being a coding genius to help out.</p>
]]>
  </description>
  <pubDate>Wed, 27 May 2015 10:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2015/05/commiting-to-d8/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2015/05/commiting-to-d8/</guid>
</item>

    

  </channel>
</rss>
