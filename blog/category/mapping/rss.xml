<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThinkShout</title>
    <description>ThinkShout - We provide web strategy and open source technology to forward-thinking organizations.</description>
    <link>https://thinkshout.com</link>
    <atom:link href="https://thinkshout.com/blog/category/mapping/rss.xml/rss.xml" rel="self" type="application/rss+xml"/>

    
      <item>
  <title>Terms and Trends in DIY and Open Source Online Maps</title>
  <description>
    <![CDATA[<blockquote><p>The following article was recently published by the <a href="http://www.nten.org/articles/2012/terms-and-trends-in-diy-and-open-source-online-maps">Nonprofit Technology Network</a>, in advance of ThinkShout's upcoming presentation on online mapping technologies at the <a href="http://www.nten.org/ntc">2012 Nonprofit Technology Conference</a>.</p></blockquote>
<p><em>Data-driven storytelling</em> is all the rage on the web, particularly as we move into the election season. Online maps provide a concrete, quickly digestible way to drive home the connection between your organization's work and where it takes place. Online maps can demonstrate the breadth of large movements or highlight grassroots work at a very local level.</p>
<!--break-->
<p>In ancient times (5-6 years ago), there were two main ways to visualize data with online maps. You could embed a simple Google map on your website or you could invest in a Flash-based mapping tool.</p>
<p>While beautiful maps have been a staple of the web for the last decade, development of highly-customized maps historically has been expensive and has required a very specialized skill set and tools. With Adobe Flash, Active X, or other browser-specific technology requirements, the accessibility of these maps across various platforms was also a real problem. Today, with more and more people accessing the web on mobile and tablet devices, these older mapping technologies are even more limiting.</p>
<p>Fortunately, the advent of HTML5, CSS3, jQuery, and other modern web technologies has paved the way for new, open source, cross-platform compliant mapping technologies to develop stylish and interactive maps. Admittedly, implementing a truly gorgeous online map still requires some custom code and technical know-how – but, the cost and learning curve involved in the development of these maps has dropped considerably.</p>
<p><img src="http://thinkshout.com/sites/default/files/bacteria_monitoring.preview.png" border="0" alt="BlueWaterBaltimore&#039;s bacteria monitoring map" width="700" /></p>
<blockquote><p><em>An example of a modern online map: We leveraged MapQuest, Leaflet and Drupal to build Blue Water Baltimore's <strong><a href="http://bacteria.bluewaterbaltimore.org">Bacteria Monitoring Map</a></strong>.</em></p></blockquote>
<p>Consider this a starter's guide for exploring open source and DIY mapping tools. To learn more about these topics, please consider joining me for my session at this year's <a href="http://www.nten.org/ntc">Nonprofit Technology Conference</a>: "<a href="http://e.myntc.zerista.com/event/member?item_id=1195714">Geek out with online maps as storytelling devices</a>".</p>
<p><strong>What Makes Up a Web-based Map</strong>?</p>
<p>There are a couple of important concepts to understand about web-based mapping. First, there are generally two ways to present a map on a webpage. The first method was described above: <strong>Flash-Based maps</strong>. With Flash-based maps, you essentially embed an Adobe Flash file  that "plays" on your website. There are many freely-available Flash-based mapping libraries; more sophisticated Flash-based mapping tools often require licensing fees. As mentioned previously, the main problem with these maps is the Adobe Flash requirement itself: among other problems, Flash just isn't available on Apple devices such as the iPhone and iPad - cutting out a huge segment of your site's potential audience.</p>
<p>The second, and in my opinion  preferred, approach involves <strong>javascript</strong>. With javascript-based maps, a bit of code is downloaded as part of a webpage to a site visitor's web browser. From there, the javascript pulls together data, images, and map controls to render the map and to allow your site visitor to interact with it.</p>
<p>I'll describe the components of these maps shortly - but the important concept to understand is that because these maps rely on javascript – a core technology found on most modern websites – they are largely cross-browser and cross-device compliant. While some maps look and function better on different browsers, modern javascript-based maps should function and adapt to use on iPhones, tablets, and other mobile devices.</p>
<p><strong>Bits and Pieces of Javascript Maps</strong></p>
<p>There are three main components of javascript-based maps. The first is the <strong>javascript library</strong> itself. Examples of javascript mapping libraries include the <a href="http://code.google.com/apis/maps/documentation/javascript/">Google Maps Javascript API</a>, <a href="http://mapstraction.com/">Mapstraction</a>, <a href="http://openlayers.org/">OpenLayers</a>, <a href="http://modestmaps.com/">Modest Maps</a>, and <a href="http://leaflet.cloudmade.com/">Leaflet</a>. The javascript library essentially mashes together the data and images and provides all the controls on the map. These javascript libraries all provide slightly different controls and features for interacting with the map. (Getting really geeky, they also perform differently with different types of geographic data.) So, depending upon what you're trying to do with your map, one library might be a better choice than another.</p>
<p>The second component of javascript-based maps are the <strong>base layer tiles</strong> (sometimes referred to as simply <strong>map tiles</strong>). These tiles are square image files stitched together to create the underlying map. With larger map tile sets that provide different levels of detail based upon how you zoom into the map, a single base tile set might be a collection of many hundreds of millions of individual map tile images.</p>
<p>Obviously your web browser can't download all of these images at once, so javascript maps load these tiles "asynchronously" - or as you click around, recenter, and zoom in and out of the map. Often, more than one set of base layer tiles are available on the same online map. When this is the case, the javascript library provides a "tile switcher" that lets you toggle between one or more sets of base layers. You've probably already experienced this, when you've switched between the "street view" and the "satellite view" of a Google map.</p>
<p>It's important to understand that only one base tile set can be enabled at a time when viewing a map. When looking at a "hybrid" tile set, such as the one provided by Google, you are actually looking at a single tile set that has been created with both the physical and road data <em>baked into it</em>.</p>
<p><img src="http://thinkshout.com/sites/default/files/larkin_2.jpg" border="0" /></p>
<blockquote><p><em>Above is an example of four individual Google Map base layer tiles of the same location with different data baked into each image file.</em></p></blockquote>
<p>The third and final component of javascript-based maps is the <strong>vector data</strong> that's rendered on top of the map in your web browser. The distinction between base tiles and vector data is the most important, and difficult to understand, concept in web-based mapping.</p>
<p>Again, the base tiles are simply images that are downloaded on the fly and stitched together to provide the underlying map. Vector data is then rendered, or <em>drawn on top</em> of, the map by the javascript in the site visitor's web browser.</p>
<p>The most basic example of vector data are point markers placed on top of a Google map. These points consist of a latitude and longitude value, a map point marker icon, and optionally some amount of content that appears in a pop-up bubble when you click on the map icon. More complex vector data might include different colored polygon shapes and lines.</p>
<p>Vector map data can exist in different formats that are processed by the various mapping javascript libraries. Two of the more common open source formats are <a href="http://code.google.com/apis/kml/documentation/">KML</a> (the format pioneered by Google) and <a href="http://geojson.org/">GeoJSON</a>.</p>
<p>This vector data is often grouped into different "data layers". When different sets of vector data layers are available on a single map, the javascript library will often provide a switcher that allows you to toggle on or off one or more of these data sets. Again, an important distinction between base layer tiles and vector layer data is that only one base layer can be toggled on at a time. However, multiple vector layers can be displayed at a time - layering these data sets on top of each other.</p>
<p><img src="http://thinkshout.com/sites/default/files/watertrail.png" border="0" width="700" /></p>
<blockquote><p><em>The James River Association's <strong><a href="http://map.jrava.org">Water Trail Map</a></strong> above demonstrates both point data and polygon vectors drawn on top of a Google Map base layer. The polygon lines in blue and green are stored as KML. We built this map with Drupal and OpenLayers.</em></p></blockquote>
<p>Another important point to understand about vector data is that for most javascript map implementations, all available vector data must be downloaded to the site visitor's browser before any of this data can be rendered on the map. Consequently, larger vector data sets can slow down the site visitor's experience of your map, regardless of whether or not the data is initially displayed on the map or hidden.</p>
<p>Likewise, it's important to understand that it takes time and processing power for a web browser to draw all these vector points and polylines on the map. Even moderately large vector data sets can contain many thousands of lat/long pairs, so drawing larger shapes can sometimes slow down a user's experience of a map. As a result, for very complex data sets and shapes, it is often necessary to bake this data into the base layer tiles themselves.</p>
<p>"Baking base layer tile sets" used to be a herculean task outside the range of possibility for most smaller web mapping projects. However, with the release of new web cartography tools such as <a href="http://mapbox.com/tilemill/">Tilemill</a> (described below), creating base tile sets is within reach of projects with even modest development budgets.</p>
<p><strong>Creating Your Own Base Layer Map Tiles</strong></p>
<p>In my opinion, the most interesting advance in web mapping has been the development of open source cartography tools that allow even beginner technologists to become map makers.</p>
<p>Creation of beautiful "offline maps" and custom base layer tile sets has been available for many years with proprietary tools provided by companies such as ESRI. In just the last two years, organizations such as <a href="http://openplans.org/">OpenPlans</a> and <a href="http://developmentseed.org/">Development Seed</a> have released open source cartography tools the level the playing field with proprietary products.</p>
<p>Of these tools, Development Seed's <a href="http://mapbox.com/tilemill">Tilemill</a> product is the most advanced and easy-to-use. With Tilemill, you can mash-up complex data sets (such as ESRI <a href="http://en.wikipedia.org/wiki/Shapefile">Shapefiles</a>), as well as image files that contain geodata (such as <a href="http://en.wikipedia.org/wiki/GeoTIFF">GeoTIFFs</a>) to create your own tiles. Crafting these maps is a lot like working with CSS. Once you upload data to Tilemill, you can style it - like presenting different features and styles at varying zoom levels.</p>
<p>Once you've created your own base tiles, you can then host (or serve them up to your website) yourself with <a href="https://github.com/mapbox/tilestream">Tilestream</a>, Development Seed's open source map tile server, or host them with Development Seed's pay-as-you-go <a href="http://mapbox.com">MapBox</a> service. (For its modest price and sophisticated feature set, I highly recommend MapBox tile hosting.)</p>
<p><img src="http://thinkshout.com/sites/default/files/mapbox_charts.png" border="0" width="700" /></p>
<blockquote><p><em>With Tilemill and MapBox, you can even turn images, such as the navigation chart above, into base map tile sets - and then mash these image-based tiles with your own point and polygon data.</em></p></blockquote>
<p><strong>Working with GeoData</strong></p>
<p>Another historic challenge with web-based cartography has been working with geographic data. Given the dominance of ESRI products in the GIS industry, most complex public data sets are distributed in ESRI's proprietary <a href="http://en.wikipedia.org/wiki/Shapefile">Shapefile</a> format. Shapefiles are a "binary format", like Microsoft Word documents or Adobe PDFs. In other words, you can't just open a Shapefile in a text editor and manipulate it, as you can with other geodata formats, such as KML.</p>
<p>Organizations such as OpenPlans and open source software developers have been investing heavily in the development of an open source GIS platform called <a href="http://opengeo.org/">OpenGeo</a>. Using OpenGeo, even beginner GIS enthusiasts can manipulate Shapefile data and integrate that geodata into their custom Tilemill maps.</p>
<p><img src="http://thinkshout.com/sites/default/files/huc_codes.png" border="0" width="700" /></p>
<blockquote><p><em>In the example map above, we used OpenGeo to stitch together US Geological Survey hydrological data originally in shapefile format. We then turned this data into base layer tiles with TileMill.</em></p></blockquote>
<p><strong>Other DIY Mapping Tools</strong></p>
<p>While not open source, there are  a number of other web-based mapping tools that emphasize open data and promote community-driven, DIY mapping projects.</p>
<p><strong><a href="http://cloudmade.com/">CloudMade</a></strong> is freemium web service that allows you to create your own custom base tile sets, as well as embed sophisticated maps on your website. In addition to providing tile making tools, CloudMade provides access to a wealth of geographic data sets.</p>
<p>In 2011, <strong><a href="http://www.openstreetmap.org/">MapQuest</a></strong> and <strong><a href="http://www.openstreetmap.org/">OpenStreetMap</a></strong> began a partnership that has rebooted MapQuest's market position, while also bringing more attention to OpenStreetMap's mission of crowdsourcing the mapping of local communities around the world. With MapQuest and OpenStreetMap, you can quickly embed maps on your website that are comparable to Google Maps – without Google's more stringent terms of use.</p>
<p>Speaking of Google, it recently made a huge contribution to DIY mapping with the integration of <strong>Google Fusion Tables and the Google Maps API</strong>. With Google Fusion Tables, you can essentially leverage Google Spreadsheets to collect and manage very large geodata sets. With Fusion Tables's built-in support for Google Maps, rendering complex maps is highly performant. (Check out <a href="https://sites.google.com/site/fusiontablestalks/stories">these examples</a>.)</p>
<p><strong>Whew, What's Next?</strong></p>
<p>That's a lot of info, right? Where should you go from here? Well, I'd recommend coming to NTEN's<a href="http://www.nten.org/ntc"> 2012 NTC</a> to learn more about mapping (among other things)! At the NTC, I'll be building upon these basic topics to talk about map-based storytelling strategies, as well as integration of mapping tools with content management systems and CRM tools.</p>
]]>
  </description>
  <pubDate>Mon, 16 Jan 2012 00:00:00 -0500</pubDate>
  <link>https://thinkshout.com/blog/2012/01/sean/terms-and-trends-diy-and-open-source-online-maps/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2012/01/sean/terms-and-trends-diy-and-open-source-online-maps/</guid>
</item>

    
      <item>
  <title>OpenLayers Love for Drupal 7</title>
  <description>
    <![CDATA[<p><img src="http://drupal.org/files/images/openlayers_monster.thumbnail.png" title="OpenLayers" style="float:left; margin:0 10px 0 0" />
Mapping has become a significant component of many of ThinkShout’s projects over the last couple years, included on sites such as <a href="http://saveourgulf.org">Save Our Gulf</a>, <a href="http://map.jrava.org">James River Association</a>, and the <a href="http://maps.lcrep.org">Lower Columbia River Estuary Partnership</a> . The tools we use are constantly evolving. For example, we recently launched a <a href="http://bacteria.thinkshoutlabs.com/">bacteria monitoring site for Blue Water Baltimore</a> (note, staging site) using <a href="http://cloudmade.com">Cloudmade</a>’s <a href="http://leaflet.cloudmade.com">Leaflet</a> and an accompanying <a href="http://drupal.org/project/leaflet">Drupal module</a> of the same name. But the <a href="http://openlayers.org">OpenLayers map scripting library</a> and <a href="http://drupal.org/project/openlayers">Drupal module</a> have been sophisticated mainstays. During that time, we’ve contributed a few of our own add-ons to meet our client’s needs, namely <a href="http://drupal.org/project/openlayers_field">OpenLayers Field</a>, <a href="http://drupal.org/project/openlayers_kml_layer">OpenLayers KML Layer</a>, and <a href="http://drupal.org/project/openlayers_taxonomy">OpenLayers Taxonomy</a>. The first is a new module for Drupal 7’s field system and the latter 2 were originally built for D6 and just ported to D7. We worked with the esteemed <a href="http://drupal.org/user/147331">Alan Palazzolo</a>, current maintainer of flagship OpenLayers’s module, on all 3 projects, which now have beta releases.
<!--break--></p>
<h2 id="openlayers-field">OpenLayers Field</h2>
<p>Expose available OpenLayers presets as a field and then display the map when viewing an entity. Yes, it’s that simple. As an added bonus, you can export OL presets into your <a href="http://drupal.org/project/features">Features</a> along with the field definitions to create a neat and tidy package.</p>

<h2 id="openlayers-kml-layer">OpenLayers KML Layer</h2>
<p>Allows users to create a map layer from an uploaded KML file and associate it with one or more map presets. The settings are exposed through a file field widget where you can specify if a new layer should be created and which map preset to associate it with. The module also includes a file field display formatter where users can select a map preset to to show the kml layer on. So there are really two ways to use this module. One as a way to generally upload kml files and show them on a given map preset and two as way to have an entity field that will allow users to upload kml data and show it on a map.</p>

<h2 id="openlayers-taxonomy">OpenLayers Taxonomy</h2>
<p>Creates a map layer for each term in a configured vocabulary. The map features for each layer are rendered by an OpenLayers data view display that accepts the taxonomy term as an argument. The module defines a new OpenLayers layer type, <em>openlayers_taxonomy_vector</em>, and when a new term is added in a given vocabulary, a new layer is created for it. These layers are then made available through the standard OL preset interface and can be placed on any map. Particularly useful for filtering map features based on taxonomy terms. You can see it in action on the <a href="http://map.jrava.org">James River Association</a> site.</p>
]]>
  </description>
  <pubDate>Wed, 07 Sep 2011 00:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2011/09/lev/openlayers-love-drupal-7/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2011/09/lev/openlayers-love-drupal-7/</guid>
</item>

    
      <item>
  <title>Mapping with Drupal</title>
  <description>
    <![CDATA[<p><img alt="compass" height="250" src="http://www.levelos.com/files/compass.png" style="float: right; margin: 0 0 10px 10px; border: none" width="200" /> I&#39;ve recently become more involved with map scripting in my work on <a href="http://maps.lcrep.org">LCREP</a>, <a href="http://saveourgulf.org/observations">Save Our Gulf</a>, <a href="http://geomeridian.com">Geomeridian</a>, and a few others in the works. One commonality amongst all the projects was the need to display geocoded data on a map, a problem solved many times over. When I began work on the first of these projects this past spring, the state of mapping in <a href="http://drupal.org">Drupal</a> boiled down to these tools.</p>
<h2>Mapedelic</h2>
<p>Mapedelic is the name given to the powerful and well established duo of <a href="http://drupal.org/project/location">Location</a> and <a href="http://drupal.org/project/gmap">Gmap</a>. The former stores address and coordinates as either CCK fields or in its own schema and can geocode addresses when called upon. The latter then renders those locations on a Google map. Gmap also plays well with Views. Both these modules have large install bases and have been in use for some time.</p>
<h3>Pros</h3>
<ul><li>Large, well established user base</li><li>Stability</li><li>Geocoding of addresses</li></ul>
<h3>Cons</h3>
<ul><li>Location paradigm of collecting addresses is not applicable for more diverse use cases.</li><li>Geocoding has some problems when updating addresses.</li><li>You can&#39;t change between a fields and node based approach. Since fields is by far more flexible, and the future, there&#39;s lots of code debt to the pure nodes approach that most people don&#39;t need.</li><li>Gmap uses the legacy v2 Google Maps API.</li><li>Configuration and customization of the Gmaps output can be difficult.</li><li>You&#39;re locked into using Google Maps.</li></ul>
<h2><a href="http://drupal.org/project/openlayers">OpenLayers</a></h2>
<p>From the project page,</p>
<blockquote>The OpenLayers Module and its submodules bring the <a href="http://openlayers.org">OpenLayers JS library</a> into Drupal. They enable users to combine maps from different map providers with data from Views and CCK input. The OpenLayers JavaScript library is open source, making it flexible and capable across standards as well as proprietary APIs.</blockquote>
<h3>Pros</h3>
<ul><li>Well thought out architecture and API allowing for many use cases.</li><li>Comes bundled with OpenLayers CCK, a WKT field which can store point, linestring, or polygon data in a single field. It also comes with a &quot;map picker&quot;, allowing users to enter data via a map interface.</li><li>Ecosystem of supporting modules such as <a href="http://drupal.org/project/openlayers_proximity">OpenLayers Proximity</a>, <a href="http://drupal.org/project/openlayers_geocoder">OpenLayers Geocoder</a>, <a href="http://drupal.org/project/geotaxonomy">Geo Taxonomy</a>, and <a href="http://drupal.org/project/mapbox">MapBox</a>.</li><li>Provides a set of tools to mash your Drupal data with external sources, E.g., KML files.</li><li>OpenLayers is open source, unlike the proprietary map scripting APIs from Google, Yahoo, and Bing.</li></ul>
<h3>Cons</h3>
<ul><li>The flexibility translates to a complicated setup and configuration.</li><li>Views integration is particularly non-intuitive, as you have to create at least 2 views. One for your data and another simply as a &quot;vehicle&quot; to carry your preset along.</li><li>Still in alpha and there are some stability issues.</li><li>The OpenLayers library slows to a crawl with more than 500 or so features on a map.</li><li>There are potential licensing issues when using tiles from proprietary providers like Google. Basically, OpenLayers directly accesses the map tiles of a given provider without going through their APIs, and that&#39;s against Google&#39;s TOS unless one gets express permission. Not to mention Google could easily shut down access to it&#39;s tiles by OpenLayers, not that there&#39;s any indication they would do that.</li></ul>
<h2><a href="http://drupal.org/project/geo">Geo</a></h2>
<p>I really want to love this module, as it stores geo data natively in a spatially enabled databases, PostGIS and MySql Spatial specifically. This allows for powerful and efficient spatial queries, such as, do these set of points fall in this polygon, or do these two linestrings intersect and, if so, where? It also provides support for proximity filters within Views. Unfortunately, though, I&#39;ve found that it&#39;s just not ready for production, is very unstable, and difficult to work with. It has also been stuck in alpha for nearly a year, with no new releases since April. One of the challenges that Geo, or any module wanting to implement native spatial data storage, is that the Drupal schema API doesn&#39;t support a spatial datatype, although there are some work arounds.</p>
<h2><a href="http://drupal.org/project/gmaps">GMAPS</a></h2>
<blockquote>This project integrates the Google Maps API and Google Static Maps API. It makes possible to add addresses and/or coordinates (points) to nodes through CCK fields, display these geographical informations on node pages as text or interactive map or static map and use them on GeoRSS feeds. The project provides style plugins and row style plugins for views to build both interactive and static maps. This project is an independent competitor for the Location and GMap pair (also known as Mapadelic), and this is the successor of the Google Client Geocoder project.</blockquote>
<p>I have to admit that I have spent the least amount of time working with this module, but the feature set does look very promising. A couple of things that jump out.</p>
<ul><li>It has LOTS of dependencies.</li><li>Still using the deprecated V2 of the Google API.</li><li>The whole proprietary provider thing.</li><li>On the plus side, it implements <a href="http://code.google.com/apis/maps/documentation/staticmaps/">Google Static Maps API</a> which, returns a single map graphic when passes a set of points and other parameters.</li></ul>
<h2><a href="http://drupal.org/project/mapstraction">Mapstraction</a></h2>
<p>When we began working on <a href="http://maps.lcrep.org">maps.lcrep.org</a>, I decided that using the <a href="http://mapstraction.com">Mapstraction library</a> was the best option, and in the process I took over the development and maintenance of the module and released a 2.x branch, which uses the newest version of the API and adds many other improvements.</p>
<blockquote>This module delivers support for the Mapstraction javascript library, which provides an abstraction layer for the various map providers including Google, Yahoo!, and MapQuest. It allows you to quickly display maps on your site from multiple providers and switch between providers without worrying about differences in their APIs. The module provides a Views style plugin and an API for developers to use maps elsewhere. When the Views style is used, it will display nodes as points on a map. The latitude/longitude points, info balloon contents, map icon, and one or more attributes can be provided by any view fields, including those from CCK. Other settings can be seen on the attached screen shot.</blockquote>
<p>The architecture of the module is very simple. Aside from a set of core API calls developers can use in their code to render maps, it exposes a Views style plugin which has options for mapping fields to coordinates, tooltips, map icons, and attributes. The last item is a nice feature of Mapstraction. Any point on a map can have an arbitrary collection of attributes, really name/value pairs, which can then be used to filter the map with a simple Javascript call. That&#39;s how we&#39;re doing the map filtering on maps.lcrep.org. We also used an updated version of the module, with Google V3 integration, on <a href="http://saveourgulf.org">Save Our Gulf</a>. The module is in fairly active development, and is plotting along with the Mapstraction library. So when an official release of that will be made, I&#39;ll do the same with the module.</p>
<h2>Conclusion</h2>
<p>In the end, the right mapping tool of course depends on the requirements. For complex interfaces that display lots of different data, I think OpenLayers might be the way to go, at least if your rendering less than 500 points on a single map. For fairly simple requirements such as plotting points on a map, I think Mapstraction is a great fit, but, of course, I&#39;m biased towards it. All of the tools discussed here are excellent, and, I have to stress, are evolving rapidly, so what might be unstable one day may be polished and ready for production the next. And they all point to the powerful mapping features that can be built with Drupal. I have also begun work on two additional mapping related modules. A dedicated <a href="http://code.google.com/apis/maps/documentation/javascript/">Google Maps Javascript API</a> taking full advantage of the V3 feature set and a fields module integrating with <a href="http://simplegeo.com/">SimpleGeo</a>. Early suggestions welcome!</p>

<p><em>Note that this article was originally published by Lev at http://www.levelos.com/blog/2010/08/mapping-drupal.</em></p>
]]>
  </description>
  <pubDate>Thu, 05 Aug 2010 00:00:00 -0400</pubDate>
  <link>https://thinkshout.com/blog/2010/08/lev/mapping-drupal/</link>
  <guid isPermaLink="true">https://thinkshout.com/blog/2010/08/lev/mapping-drupal/</guid>
</item>

    

  </channel>
</rss>
